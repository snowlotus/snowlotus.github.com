{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/vue-components-bus-01.png","path":"img/vue-components-bus-01.png","modified":0,"renderable":0},{"_id":"source/img/css-interview/boxmodel.png","path":"img/css-interview/boxmodel.png","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/1.jpg","path":"img/js-black-tech/1.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/10.jpg","path":"img/js-black-tech/10.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/11.jpg","path":"img/js-black-tech/11.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/12.jpg","path":"img/js-black-tech/12.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/15.jpg","path":"img/js-black-tech/15.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/13.jpg","path":"img/js-black-tech/13.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/14.jpg","path":"img/js-black-tech/14.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/16.jpg","path":"img/js-black-tech/16.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/17.jpg","path":"img/js-black-tech/17.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/18.jpg","path":"img/js-black-tech/18.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/2.jpg","path":"img/js-black-tech/2.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/19.jpg","path":"img/js-black-tech/19.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/20.jpg","path":"img/js-black-tech/20.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/21.jpg","path":"img/js-black-tech/21.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/22.jpg","path":"img/js-black-tech/22.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/23.jpg","path":"img/js-black-tech/23.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/24.jpg","path":"img/js-black-tech/24.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/25.jpg","path":"img/js-black-tech/25.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/26.jpg","path":"img/js-black-tech/26.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/28.jpg","path":"img/js-black-tech/28.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/27.jpg","path":"img/js-black-tech/27.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/29.jpg","path":"img/js-black-tech/29.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/3.jpg","path":"img/js-black-tech/3.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/30.jpg","path":"img/js-black-tech/30.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/31.jpg","path":"img/js-black-tech/31.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/32.jpg","path":"img/js-black-tech/32.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/33.gif","path":"img/js-black-tech/33.gif","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/34.jpg","path":"img/js-black-tech/34.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/35.jpg","path":"img/js-black-tech/35.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/4.jpg","path":"img/js-black-tech/4.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/5.jpg","path":"img/js-black-tech/5.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/6.jpg","path":"img/js-black-tech/6.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/7.jpg","path":"img/js-black-tech/7.jpg","modified":0,"renderable":0},{"_id":"source/img/js-black-tech/8.jpg","path":"img/js-black-tech/8.jpg","modified":0,"renderable":0},{"_id":"source/img/readme-img/readme1.png","path":"img/readme-img/readme1.png","modified":0,"renderable":0},{"_id":"source/img/readme-img/readme2.png","path":"img/readme-img/readme2.png","modified":0,"renderable":0},{"_id":"source/img/readme-img/readme3.png","path":"img/readme-img/readme3.png","modified":0,"renderable":0},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/img/js-black-tech/9.jpg","path":"img/js-black-tech/9.jpg","modified":0,"renderable":0},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/vue_pro.jpg","path":"css/images/vue_pro.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/vexo/_config.yml","hash":"d77399e90303ea434d760daa56f16433517db8e8","modified":1527674978454},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1527674109124},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1527674109124},{"_id":"source/_posts/css-interview.md","hash":"8724a9ae20eb71e1554d5b6b5bc85c2d3d20bce0","modified":1527674109089},{"_id":"source/_posts/javascript-function.md","hash":"b3c1a02d3f0c5bdfbb2b28c9660df2d1cfdc2cce","modified":1527674109089},{"_id":"source/_posts/javascript-traverse.md","hash":"128d7792f52f53c12476bd1aefabbbd3864a57e3","modified":1527674109089},{"_id":"source/_posts/mpvue-weui.md","hash":"f53b726eb717cba4a3b474c8ada588f195c12513","modified":1527674109089},{"_id":"source/_posts/vue-component-communication.md","hash":"1dfeaa8cb30177f368397093b9589559ca6f98c6","modified":1527674109090},{"_id":"source/_posts/vue-router.md","hash":"54352e4ce7f5eb612958ceca940a6167dc0fdf69","modified":1527674109090},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1527674109090},{"_id":"source/img/vue-components-bus-01.png","hash":"43eb2f5af409d03d39bc40726c0f07f6575dd0d4","modified":1527674109106},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1527674109107},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1527674109106},{"_id":"themes/vexo/layout/about.ejs","hash":"8b1b8f38c9d54c818232aa5812ed935661ee6c53","modified":1527674109122},{"_id":"themes/vexo/layout/archive.ejs","hash":"af1b76141fe72a6a4e0280ed765e11966051045b","modified":1527674109122},{"_id":"themes/vexo/layout/index.ejs","hash":"5039a8285f040f3fb780c930e12e6d1ae5ce1305","modified":1527674109122},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1527674109122},{"_id":"themes/vexo/layout/page.ejs","hash":"40ae816e492101f916ea0fdf9910774149ddcf04","modified":1527674109123},{"_id":"themes/vexo/layout/project.ejs","hash":"662e1b37d5f192d4d94ff335b17fd2be605e94e4","modified":1527674109123},{"_id":"themes/vexo/layout/tags.ejs","hash":"acd4bec10562e6aab98b2347a44f3687e8f5e485","modified":1527674109123},{"_id":"themes/vexo/static/gitment.css","hash":"c245680e6900ca43514d2023bf1f0e1b539992dc","modified":1527674109134},{"_id":"source/img/css-interview/boxmodel.png","hash":"d489b0495c9cde1d7c692bebd227c31c9032739c","modified":1527674109090},{"_id":"source/img/js-black-tech/1.jpg","hash":"91668617234050baf4f3e7a6d1844f2d5e880f84","modified":1527674109091},{"_id":"source/img/js-black-tech/10.jpg","hash":"c759aebf42ea7140d5086ebb676ce81dd39e493f","modified":1527674109091},{"_id":"source/img/js-black-tech/11.jpg","hash":"014983b3e8b7f5a5548b74a3362d629d0bfe519f","modified":1527674109091},{"_id":"source/img/js-black-tech/12.jpg","hash":"4be37ac08a0fe9e38e5cc48656270d74910966a6","modified":1527674109091},{"_id":"source/img/js-black-tech/15.jpg","hash":"afdc8a79511de918ef022342f58388e625012690","modified":1527674109092},{"_id":"source/img/js-black-tech/13.jpg","hash":"dc3e41a3b7e82e06011665467e6daf45ef5134f1","modified":1527674109092},{"_id":"source/img/js-black-tech/14.jpg","hash":"e97358edd86cdf1b0c3f29368c41971ae36862e8","modified":1527674109092},{"_id":"source/img/js-black-tech/16.jpg","hash":"4a47bfc4ab6055e794b0fd2aba9d7eb53ec055d1","modified":1527674109093},{"_id":"source/img/js-black-tech/17.jpg","hash":"47dedb77e6370a61523d50d0f290511bd1281433","modified":1527674109093},{"_id":"source/img/js-black-tech/18.jpg","hash":"b37cd5ff118886bed5ad27816bfbc3833f944157","modified":1527674109094},{"_id":"source/img/js-black-tech/2.jpg","hash":"41c88e12c1a888bedbdcf6bc328bb098d6948739","modified":1527674109094},{"_id":"source/img/js-black-tech/19.jpg","hash":"6ceb9685718da86bdb1035535285336109bb183c","modified":1527674109094},{"_id":"source/img/js-black-tech/20.jpg","hash":"828b64484eb25270363285992d1e1619b9820662","modified":1527674109094},{"_id":"source/img/js-black-tech/21.jpg","hash":"ea9392cd163f365c2f7569117e2365c97ec5bc06","modified":1527674109095},{"_id":"source/img/js-black-tech/22.jpg","hash":"78d1ba6483f979ef8a0f24b90d47f3fb95870060","modified":1527674109096},{"_id":"source/img/js-black-tech/23.jpg","hash":"b3ef99c290484802793b34e20e2b6f7fb232d54b","modified":1527674109096},{"_id":"source/img/js-black-tech/24.jpg","hash":"ffd6292ac755c5c4518ac568684121e6ae2e1a2d","modified":1527674109096},{"_id":"source/img/js-black-tech/25.jpg","hash":"7c656d744af341179d8ed9577c580258b018ede8","modified":1527674109097},{"_id":"source/img/js-black-tech/26.jpg","hash":"bbf2f91ea617c25ebfeb11d9f3aa56485fc351bb","modified":1527674109097},{"_id":"source/img/js-black-tech/28.jpg","hash":"2863428057966675e96e6f7113133be18e8aa4aa","modified":1527674109098},{"_id":"source/img/js-black-tech/27.jpg","hash":"9662e55b263db80ec46541cbf7a433b9ba64b56d","modified":1527674109097},{"_id":"source/img/js-black-tech/29.jpg","hash":"1e33bed26fc51171fd210c7a1bf5a93744777332","modified":1527674109098},{"_id":"source/img/js-black-tech/3.jpg","hash":"71ca4963e98916f9f75178301020d94525bbafbe","modified":1527674109098},{"_id":"source/img/js-black-tech/30.jpg","hash":"fac81e3f3f97081512624a3fb5c5a53064533ba0","modified":1527674109099},{"_id":"source/img/js-black-tech/31.jpg","hash":"7578b39786038621ad8fe4a0ad214966ae10eb72","modified":1527674109099},{"_id":"source/img/js-black-tech/32.jpg","hash":"f0d75cff4778005c41ca956c760d14d84bb38ae5","modified":1527674109100},{"_id":"source/img/js-black-tech/33.gif","hash":"502aa094697821dc6c2ef8a33506f520ab7bf86f","modified":1527674109100},{"_id":"source/img/js-black-tech/34.jpg","hash":"cd94ad41297200a5bbde868b85a658b7411cb8e1","modified":1527674109100},{"_id":"source/img/js-black-tech/35.jpg","hash":"cd2d3e236a648af18e7afe38c6193732e8fcf024","modified":1527674109101},{"_id":"source/img/js-black-tech/4.jpg","hash":"816034556691307481956093a254d3a0d243e7e5","modified":1527674109101},{"_id":"source/img/js-black-tech/5.jpg","hash":"056830caef51b4a3a88da7120591ea7b308fc158","modified":1527674109102},{"_id":"source/img/js-black-tech/6.jpg","hash":"488cf906927d4e297a9d184d1814bf029d5ca8fb","modified":1527674109102},{"_id":"source/img/js-black-tech/7.jpg","hash":"ffceee0f930afa1360408b01b11c5f53f1bcf347","modified":1527674109102},{"_id":"source/img/js-black-tech/8.jpg","hash":"26365c6972c83d8068bf213ca3ce55f2fe7ebc03","modified":1527674109103},{"_id":"source/img/readme-img/readme1.png","hash":"a6e77f1dd3454083ea5136765af05e4d9894deb7","modified":1527674109105},{"_id":"source/img/readme-img/readme2.png","hash":"3b198c29e8dbd62b1d3f06c4c83c4521c9afd083","modified":1527674109105},{"_id":"source/img/readme-img/readme3.png","hash":"9da143276cf0c7cb8dfa6407ebfa75fbcf730d89","modified":1527674109106},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1527674109119},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1527674109119},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1527674109120},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1527674109120},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1527674109120},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"565ebdc0cfc06b68bfeaea3fc0ab020a7b1d31ee","modified":1527674109121},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"e8b1b4336a2a2921046271742e4018026b27672a","modified":1527674109121},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"bd53219f52f119fe29183674c789e46da6cd5843","modified":1527674109121},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1527674109121},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"afdfbe882e4179323dd185e66a7eeaa22342f5bf","modified":1527674109121},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1527674109122},{"_id":"themes/vexo/source/css/_config.styl","hash":"ded322f32ddb31ca9973d58d129be09d8994f74b","modified":1527674109124},{"_id":"themes/vexo/source/css/style.styl","hash":"10619b7dd0912709c0ccf74f439208bcef468ee2","modified":1527674109130},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1527674109133},{"_id":"themes/vexo/source/js/script.js","hash":"79e35bcea678a0d057ef05a51ad9d2f816f9389a","modified":1527674109133},{"_id":"themes/vexo/static/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1527674109135},{"_id":"source/img/js-black-tech/9.jpg","hash":"40cd8f575902be648d037582af3427e909b0dab6","modified":1527674109104},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8fe2282486fbb59838cbea2202c6df8c471e0149","modified":1527674109124},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"d433506f00d0d84b7476ba9588e23ac0f9473c8a","modified":1527674109125},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"37175d72f44bc0e354554c1dff67f7010169fb1b","modified":1527674109125},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"3a8762c7a3d33dfd820095735a19778259c6e7c9","modified":1527674109125},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"8fe5f3165628af0ce59a7e0fabbaab8f47f5bb52","modified":1527674109125},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"1ba71943cc3f4d734b1a0f7af93b7e4b41c9874f","modified":1527674109126},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1527674109126},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"78bf52ed8a8e2a8ac0d7075e0afaaa42027c353d","modified":1527674109126},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1527674109126},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1527674109128},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1527674109128},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1527674109128},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1527674109128},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1527674109129},{"_id":"themes/vexo/source/css/images/vue_pro.jpg","hash":"ad09ea8a127671dba647a78724230be4af5b57df","modified":1527674109129},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"89a1453354119058dba888a6d877f74948646f2e","modified":1527674109129},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1527674109130},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1527674109132},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1527674109133},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"1b38f67192cc4bf6b2ea7f31aab9451f4d3fbb18","modified":1527674109127}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2018-05-30T09:55:09.090Z","updated":"2018-05-30T09:55:09.090Z","path":"about/index.html","comments":1,"_id":"cjhsxt1rn00019xojsms54set","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2018-05-30T09:55:09.107Z","updated":"2018-05-30T09:55:09.107Z","path":"tags/index.html","comments":1,"_id":"cjhsxt1rp00039xojni1lb0va","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2018-05-30T09:55:09.106Z","updated":"2018-05-30T09:55:09.106Z","path":"project/index.html","comments":1,"_id":"cjhsxt1rt00069xoj90ne9b4p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"总会收集一些有用的 CSS","date":"2018-02-24T01:50:03.000Z","summary":"不知道写什么概括语，就这样写吧：目前收集了盒子模型、box-sizing 属性、CSS 选择器、CSS 继承属性、CSS3新特性等等。","_content":"#### 1. CSS 盒子模型\n在一个文档中，每个**元素**都被表示为一个**矩形**的盒子。确定这些盒子的尺寸, 属性 --- 像它的颜色，背景，边框方面 --- 和位置是渲染引擎的标。\n在 CSS 中使用标准的**盒模型**来描述这些矩形盒子中的每一个，这个模型描述了元素所占空间的内容。每个盒子有四个边：**外边距边**, **边框边**, **内填充边** 与 **内容边**。分别对应CSS中的 **margin** **border** **padding** **content**。\n<img src=\"/blog/img/css-interview/boxmodel.png\">\n或者可以这样描述: 宽度(width)=内容的宽度(content) + padding + border + margin\n<p class=\"tip\">上面描述的是标准的盒子模型，当然还有低版本IE盒子模型，它可以进行这样描述:宽度(width)=内容的宽度(content+ padding + border) + margin，两者的区别可以很明显的看出。</p>\n\n#### 2. box-sizing 属性\n**box-sizing**在开发中很常见，它是盒子模型的解析模式,她有两个值：content-box和border-box,默认为content-box\n* **content-box**: 标准的W3C盒子模型，设置元素的height/width属性指的是conent部分的height/width\n* **border-box**: IE传统盒子模型，设置元素的height/width属性指的是border+padding+content部分的height/width\n\n> 这个属性很实用，比如你想将一个div的宽度设置为100%，然后又想加一个padding，如果不将box-sizing设置为border-box，那么这个div就会溢出，反之就是你想要的效果。\n\n#### 3. CSS 选择器\n在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。\n\n|选择器|例子|例子描述|CSS\n|---|---\n|.class|.info|选择 class=\"info\" 的所有元素。|1\n|#id|#idName|选择 id=\"idName\" 的所有元素。|1\n|*|*|选择所有元素。|2\n|element|\tp|选择 所有`<p>`元素。|1\n|element,element|div,p|选择所有`<div>`元素和所有 `<p>` 元素。|1\n|element element|div p|选择 `<div>` 元素内部的所有 `<p>` 元素。|1\n|element>element|\tdiv>p|选择所有父元素为`div`的`p`元素|2\n|element+element|div+p|选择紧接着`div`元素之后的所有`p`元素|2\n|[attribute]|[target]|选择带有 target 属性所有元素。|\t2\n|[attribute=value]|[target=_blank]|选择 target=\"_blank\" 的所有元素。|2\n|:link|a:link|选择所有未被访问的链接。|1\n|:first-letter|p:first-letter|选择每个 `<p>` 元素的首字母。。|1\n|:before|\tp:before|在每个 `<p>` 元素的内容之前插入内容。|2\n|:first-of-type|\tp:first-of-type|选择属于其父元素的首个 `<p>` 元素。|3\n|:not(selector)|:not(p)|选择非 `<p>` 元素的每个元素。|3\n\n<p class=\"tip\">上面这些选择器是一些比较常见的选择器，其中也包含了一些CSS3中的新的选择器。[更多选择器](http://www.w3school.com.cn/cssref/css_selectors.ASP)</p>\n\n#### 4. CSS 哪些属性可以继承\nCSS 可继承的属性有: \n``` css\n* font-size \n* font-family \n* color\n```\n\n#### 5. CSS3新增伪类有那些\n* p:first-of-type 选择其父元素的首个`<p>`元素\n* p:first-of-type 选择其父元素的最后一个`<p>`元素\n* p:only-of-type 选择属于其父元素唯一的元素\n* p:only-child 选择属于其父元素的唯一子元素\n* p:nth-child(2) 选择属于其父元素的第二个子元素\n* :enabled :disabled 表单控件的禁用状态。\n* :checked 单选框或复选框被选中。\n\n#### 6. CSS3有哪些新特性？\n* RGBA和透明度\n* background-image background-origin(content-box/padding-box/border-box) background-size background-repeat\n* word-wrap（对长的不可分割单词换行）word-wrap：break-word\n* 文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）\n* font-face属性：定义自己的字体\n* 圆角（边框半径）：border-radius 属性用于创建圆角\n* 边框图片：border-image: url(border.png) 30 30 round\n* 盒阴影：box-shadow: 10px 10px 5px #888888\n* 媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性\n\n#### 7. 用纯CSS创建一个三角形的原理\n首先将其宽度和高度设置为0，然后再设置其边框的样式。\n``` css\nwidth: 0;\nheight: 0;\nborder-top: 50px solid transparent;\nborder-left: 50px solid transparent;\nborder-right: 50px solid transparent;\nborder-bottom: 50px solid #00ff00\n```\n\n#### 8. 清除浮动\n``` css\n.clearfix {\n  zoom:1\n  &::after {\n    content: '';\n    display: block;\n    height: 0;\n    visibility: hidden;\n    clear: both;\n  }\n}\n```\n\n#### 9. 移动端布局的媒体查询\n通过媒体查询可以为不同大小和尺寸的媒体定义不同的css，适应相应的设备的显示。\n* <head></head>里面\n``` html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"xxx.css\" media=\"only screen and (max-device-width:480px)\">\n```\n* CSS\n``` css\n: @media only screen and (max-device-width:480px) {/css样式/}\n```\n\n#### 10.  ::before 和 :after中双冒号和单冒号的区别\n1.单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素\n2.::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after\n\n#### 11. png、jpg、gif、webp图片格式\n* png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。\n* jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。\n* gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.\n* webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。\n\n##### 持续更新中....\n","source":"_posts/css-interview.md","raw":"---\ntitle: 总会收集一些有用的 CSS\ndate: 2018-02-24 09:50:03\ntags: [CSS,面试]\nsummary: 不知道写什么概括语，就这样写吧：目前收集了盒子模型、box-sizing 属性、CSS 选择器、CSS 继承属性、CSS3新特性等等。\n---\n#### 1. CSS 盒子模型\n在一个文档中，每个**元素**都被表示为一个**矩形**的盒子。确定这些盒子的尺寸, 属性 --- 像它的颜色，背景，边框方面 --- 和位置是渲染引擎的标。\n在 CSS 中使用标准的**盒模型**来描述这些矩形盒子中的每一个，这个模型描述了元素所占空间的内容。每个盒子有四个边：**外边距边**, **边框边**, **内填充边** 与 **内容边**。分别对应CSS中的 **margin** **border** **padding** **content**。\n<img src=\"/blog/img/css-interview/boxmodel.png\">\n或者可以这样描述: 宽度(width)=内容的宽度(content) + padding + border + margin\n<p class=\"tip\">上面描述的是标准的盒子模型，当然还有低版本IE盒子模型，它可以进行这样描述:宽度(width)=内容的宽度(content+ padding + border) + margin，两者的区别可以很明显的看出。</p>\n\n#### 2. box-sizing 属性\n**box-sizing**在开发中很常见，它是盒子模型的解析模式,她有两个值：content-box和border-box,默认为content-box\n* **content-box**: 标准的W3C盒子模型，设置元素的height/width属性指的是conent部分的height/width\n* **border-box**: IE传统盒子模型，设置元素的height/width属性指的是border+padding+content部分的height/width\n\n> 这个属性很实用，比如你想将一个div的宽度设置为100%，然后又想加一个padding，如果不将box-sizing设置为border-box，那么这个div就会溢出，反之就是你想要的效果。\n\n#### 3. CSS 选择器\n在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。\n\n|选择器|例子|例子描述|CSS\n|---|---\n|.class|.info|选择 class=\"info\" 的所有元素。|1\n|#id|#idName|选择 id=\"idName\" 的所有元素。|1\n|*|*|选择所有元素。|2\n|element|\tp|选择 所有`<p>`元素。|1\n|element,element|div,p|选择所有`<div>`元素和所有 `<p>` 元素。|1\n|element element|div p|选择 `<div>` 元素内部的所有 `<p>` 元素。|1\n|element>element|\tdiv>p|选择所有父元素为`div`的`p`元素|2\n|element+element|div+p|选择紧接着`div`元素之后的所有`p`元素|2\n|[attribute]|[target]|选择带有 target 属性所有元素。|\t2\n|[attribute=value]|[target=_blank]|选择 target=\"_blank\" 的所有元素。|2\n|:link|a:link|选择所有未被访问的链接。|1\n|:first-letter|p:first-letter|选择每个 `<p>` 元素的首字母。。|1\n|:before|\tp:before|在每个 `<p>` 元素的内容之前插入内容。|2\n|:first-of-type|\tp:first-of-type|选择属于其父元素的首个 `<p>` 元素。|3\n|:not(selector)|:not(p)|选择非 `<p>` 元素的每个元素。|3\n\n<p class=\"tip\">上面这些选择器是一些比较常见的选择器，其中也包含了一些CSS3中的新的选择器。[更多选择器](http://www.w3school.com.cn/cssref/css_selectors.ASP)</p>\n\n#### 4. CSS 哪些属性可以继承\nCSS 可继承的属性有: \n``` css\n* font-size \n* font-family \n* color\n```\n\n#### 5. CSS3新增伪类有那些\n* p:first-of-type 选择其父元素的首个`<p>`元素\n* p:first-of-type 选择其父元素的最后一个`<p>`元素\n* p:only-of-type 选择属于其父元素唯一的元素\n* p:only-child 选择属于其父元素的唯一子元素\n* p:nth-child(2) 选择属于其父元素的第二个子元素\n* :enabled :disabled 表单控件的禁用状态。\n* :checked 单选框或复选框被选中。\n\n#### 6. CSS3有哪些新特性？\n* RGBA和透明度\n* background-image background-origin(content-box/padding-box/border-box) background-size background-repeat\n* word-wrap（对长的不可分割单词换行）word-wrap：break-word\n* 文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）\n* font-face属性：定义自己的字体\n* 圆角（边框半径）：border-radius 属性用于创建圆角\n* 边框图片：border-image: url(border.png) 30 30 round\n* 盒阴影：box-shadow: 10px 10px 5px #888888\n* 媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性\n\n#### 7. 用纯CSS创建一个三角形的原理\n首先将其宽度和高度设置为0，然后再设置其边框的样式。\n``` css\nwidth: 0;\nheight: 0;\nborder-top: 50px solid transparent;\nborder-left: 50px solid transparent;\nborder-right: 50px solid transparent;\nborder-bottom: 50px solid #00ff00\n```\n\n#### 8. 清除浮动\n``` css\n.clearfix {\n  zoom:1\n  &::after {\n    content: '';\n    display: block;\n    height: 0;\n    visibility: hidden;\n    clear: both;\n  }\n}\n```\n\n#### 9. 移动端布局的媒体查询\n通过媒体查询可以为不同大小和尺寸的媒体定义不同的css，适应相应的设备的显示。\n* <head></head>里面\n``` html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"xxx.css\" media=\"only screen and (max-device-width:480px)\">\n```\n* CSS\n``` css\n: @media only screen and (max-device-width:480px) {/css样式/}\n```\n\n#### 10.  ::before 和 :after中双冒号和单冒号的区别\n1.单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素\n2.::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after\n\n#### 11. png、jpg、gif、webp图片格式\n* png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。\n* jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。\n* gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.\n* webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。\n\n##### 持续更新中....\n","slug":"css-interview","published":1,"updated":"2018-05-30T09:55:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1rj00009xoj1ftqun15","content":"<h4 id=\"1-CSS-盒子模型\"><a href=\"#1-CSS-盒子模型\" class=\"headerlink\" title=\"1. CSS 盒子模型\"></a>1. CSS 盒子模型</h4><p>在一个文档中，每个<strong>元素</strong>都被表示为一个<strong>矩形</strong>的盒子。确定这些盒子的尺寸, 属性 — 像它的颜色，背景，边框方面 — 和位置是渲染引擎的标。<br>在 CSS 中使用标准的<strong>盒模型</strong>来描述这些矩形盒子中的每一个，这个模型描述了元素所占空间的内容。每个盒子有四个边：<strong>外边距边</strong>, <strong>边框边</strong>, <strong>内填充边</strong> 与 <strong>内容边</strong>。分别对应CSS中的 <strong>margin</strong> <strong>border</strong> <strong>padding</strong> <strong>content</strong>。<br><img src=\"/blog/img/css-interview/boxmodel.png\"><br>或者可以这样描述: 宽度(width)=内容的宽度(content) + padding + border + margin</p>\n<p class=\"tip\">上面描述的是标准的盒子模型，当然还有低版本IE盒子模型，它可以进行这样描述:宽度(width)=内容的宽度(content+ padding + border) + margin，两者的区别可以很明显的看出。</p>\n\n<h4 id=\"2-box-sizing-属性\"><a href=\"#2-box-sizing-属性\" class=\"headerlink\" title=\"2. box-sizing 属性\"></a>2. box-sizing 属性</h4><p><strong>box-sizing</strong>在开发中很常见，它是盒子模型的解析模式,她有两个值：content-box和border-box,默认为content-box</p>\n<ul>\n<li><strong>content-box</strong>: 标准的W3C盒子模型，设置元素的height/width属性指的是conent部分的height/width</li>\n<li><strong>border-box</strong>: IE传统盒子模型，设置元素的height/width属性指的是border+padding+content部分的height/width</li>\n</ul>\n<blockquote>\n<p>这个属性很实用，比如你想将一个div的宽度设置为100%，然后又想加一个padding，如果不将box-sizing设置为border-box，那么这个div就会溢出，反之就是你想要的效果。</p>\n</blockquote>\n<h4 id=\"3-CSS-选择器\"><a href=\"#3-CSS-选择器\" class=\"headerlink\" title=\"3. CSS 选择器\"></a>3. CSS 选择器</h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>例子</th>\n<th>例子描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.class</td>\n<td>.info</td>\n<td>选择 class=”info” 的所有元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>#idName</td>\n<td>选择 id=”idName” 的所有元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>*</td>\n<td>*</td>\n<td>选择所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>element</td>\n<td>p</td>\n<td>选择 所有<code>&lt;p&gt;</code>元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element,element</td>\n<td>div,p</td>\n<td>选择所有<code>&lt;div&gt;</code>元素和所有 <code>&lt;p&gt;</code> 元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element element</td>\n<td>div p</td>\n<td>选择 <code>&lt;div&gt;</code> 元素内部的所有 <code>&lt;p&gt;</code> 元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element&gt;element</td>\n<td>div&gt;p</td>\n<td>选择所有父元素为<code>div</code>的<code>p</code>元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>element+element</td>\n<td>div+p</td>\n<td>选择紧接着<code>div</code>元素之后的所有<code>p</code>元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[attribute]</td>\n<td>[target]</td>\n<td>选择带有 target 属性所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[attribute=value]</td>\n<td>[target=_blank]</td>\n<td>选择 target=”_blank” 的所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>:link</td>\n<td>a:link</td>\n<td>选择所有未被访问的链接。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>:first-letter</td>\n<td>p:first-letter</td>\n<td>选择每个 <code>&lt;p&gt;</code> 元素的首字母。。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>:before</td>\n<td>p:before</td>\n<td>在每个 <code>&lt;p&gt;</code> 元素的内容之前插入内容。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>:first-of-type</td>\n<td>p:first-of-type</td>\n<td>选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>:not(selector)</td>\n<td>:not(p)</td>\n<td>选择非 <code>&lt;p&gt;</code> 元素的每个元素。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p class=\"tip\">上面这些选择器是一些比较常见的选择器，其中也包含了一些CSS3中的新的选择器。<a href=\"http://www.w3school.com.cn/cssref/css_selectors.ASP\" target=\"_blank\" rel=\"noopener\">更多选择器</a></p>\n\n<h4 id=\"4-CSS-哪些属性可以继承\"><a href=\"#4-CSS-哪些属性可以继承\" class=\"headerlink\" title=\"4. CSS 哪些属性可以继承\"></a>4. CSS 哪些属性可以继承</h4><p>CSS 可继承的属性有:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">font-size</span> </span><br><span class=\"line\">* <span class=\"selector-tag\">font-family</span> </span><br><span class=\"line\">* <span class=\"selector-tag\">color</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-CSS3新增伪类有那些\"><a href=\"#5-CSS3新增伪类有那些\" class=\"headerlink\" title=\"5. CSS3新增伪类有那些\"></a>5. CSS3新增伪类有那些</h4><ul>\n<li>p:first-of-type 选择其父元素的首个<code>&lt;p&gt;</code>元素</li>\n<li>p:first-of-type 选择其父元素的最后一个<code>&lt;p&gt;</code>元素</li>\n<li>p:only-of-type 选择属于其父元素唯一的元素</li>\n<li>p:only-child 选择属于其父元素的唯一子元素</li>\n<li>p:nth-child(2) 选择属于其父元素的第二个子元素</li>\n<li>:enabled :disabled 表单控件的禁用状态。</li>\n<li>:checked 单选框或复选框被选中。</li>\n</ul>\n<h4 id=\"6-CSS3有哪些新特性？\"><a href=\"#6-CSS3有哪些新特性？\" class=\"headerlink\" title=\"6. CSS3有哪些新特性？\"></a>6. CSS3有哪些新特性？</h4><ul>\n<li>RGBA和透明度</li>\n<li>background-image background-origin(content-box/padding-box/border-box) background-size background-repeat</li>\n<li>word-wrap（对长的不可分割单词换行）word-wrap：break-word</li>\n<li>文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）</li>\n<li>font-face属性：定义自己的字体</li>\n<li>圆角（边框半径）：border-radius 属性用于创建圆角</li>\n<li>边框图片：border-image: url(border.png) 30 30 round</li>\n<li>盒阴影：box-shadow: 10px 10px 5px #888888</li>\n<li>媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性</li>\n</ul>\n<h4 id=\"7-用纯CSS创建一个三角形的原理\"><a href=\"#7-用纯CSS创建一个三角形的原理\" class=\"headerlink\" title=\"7. 用纯CSS创建一个三角形的原理\"></a>7. 用纯CSS创建一个三角形的原理</h4><p>首先将其宽度和高度设置为0，然后再设置其边框的样式。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 0;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 0;</span><br><span class=\"line\"><span class=\"selector-tag\">border-top</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-left</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-right</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-bottom</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#00ff00</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-清除浮动\"><a href=\"#8-清除浮动\" class=\"headerlink\" title=\"8. 清除浮动\"></a>8. 清除浮动</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">zoom</span>:<span class=\"number\">1</span></span><br><span class=\"line\">  &amp;::after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-移动端布局的媒体查询\"><a href=\"#9-移动端布局的媒体查询\" class=\"headerlink\" title=\"9. 移动端布局的媒体查询\"></a>9. 移动端布局的媒体查询</h4><p>通过媒体查询可以为不同大小和尺寸的媒体定义不同的css，适应相应的设备的显示。</p>\n<ul>\n<li><p><head></head>里面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"xxx.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"only screen and (max-device-width:480px)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSS</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: @media only screen and (max-device-width:480px) &#123;/css样式/&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10-before-和-after中双冒号和单冒号的区别\"><a href=\"#10-before-和-after中双冒号和单冒号的区别\" class=\"headerlink\" title=\"10.  ::before 和 :after中双冒号和单冒号的区别\"></a>10.  ::before 和 :after中双冒号和单冒号的区别</h4><p>1.单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素<br>2.::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。<br>:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after</p>\n<h4 id=\"11-png、jpg、gif、webp图片格式\"><a href=\"#11-png、jpg、gif、webp图片格式\" class=\"headerlink\" title=\"11. png、jpg、gif、webp图片格式\"></a>11. png、jpg、gif、webp图片格式</h4><ul>\n<li>png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。</li>\n<li>jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。</li>\n<li>gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.</li>\n<li>webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。</li>\n</ul>\n<h5 id=\"持续更新中…\"><a href=\"#持续更新中…\" class=\"headerlink\" title=\"持续更新中….\"></a>持续更新中….</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-CSS-盒子模型\"><a href=\"#1-CSS-盒子模型\" class=\"headerlink\" title=\"1. CSS 盒子模型\"></a>1. CSS 盒子模型</h4><p>在一个文档中，每个<strong>元素</strong>都被表示为一个<strong>矩形</strong>的盒子。确定这些盒子的尺寸, 属性 — 像它的颜色，背景，边框方面 — 和位置是渲染引擎的标。<br>在 CSS 中使用标准的<strong>盒模型</strong>来描述这些矩形盒子中的每一个，这个模型描述了元素所占空间的内容。每个盒子有四个边：<strong>外边距边</strong>, <strong>边框边</strong>, <strong>内填充边</strong> 与 <strong>内容边</strong>。分别对应CSS中的 <strong>margin</strong> <strong>border</strong> <strong>padding</strong> <strong>content</strong>。<br><img src=\"/blog/img/css-interview/boxmodel.png\"><br>或者可以这样描述: 宽度(width)=内容的宽度(content) + padding + border + margin</p>\n<p class=\"tip\">上面描述的是标准的盒子模型，当然还有低版本IE盒子模型，它可以进行这样描述:宽度(width)=内容的宽度(content+ padding + border) + margin，两者的区别可以很明显的看出。</p>\n\n<h4 id=\"2-box-sizing-属性\"><a href=\"#2-box-sizing-属性\" class=\"headerlink\" title=\"2. box-sizing 属性\"></a>2. box-sizing 属性</h4><p><strong>box-sizing</strong>在开发中很常见，它是盒子模型的解析模式,她有两个值：content-box和border-box,默认为content-box</p>\n<ul>\n<li><strong>content-box</strong>: 标准的W3C盒子模型，设置元素的height/width属性指的是conent部分的height/width</li>\n<li><strong>border-box</strong>: IE传统盒子模型，设置元素的height/width属性指的是border+padding+content部分的height/width</li>\n</ul>\n<blockquote>\n<p>这个属性很实用，比如你想将一个div的宽度设置为100%，然后又想加一个padding，如果不将box-sizing设置为border-box，那么这个div就会溢出，反之就是你想要的效果。</p>\n</blockquote>\n<h4 id=\"3-CSS-选择器\"><a href=\"#3-CSS-选择器\" class=\"headerlink\" title=\"3. CSS 选择器\"></a>3. CSS 选择器</h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>例子</th>\n<th>例子描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.class</td>\n<td>.info</td>\n<td>选择 class=”info” 的所有元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>#id</td>\n<td>#idName</td>\n<td>选择 id=”idName” 的所有元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>*</td>\n<td>*</td>\n<td>选择所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>element</td>\n<td>p</td>\n<td>选择 所有<code>&lt;p&gt;</code>元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element,element</td>\n<td>div,p</td>\n<td>选择所有<code>&lt;div&gt;</code>元素和所有 <code>&lt;p&gt;</code> 元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element element</td>\n<td>div p</td>\n<td>选择 <code>&lt;div&gt;</code> 元素内部的所有 <code>&lt;p&gt;</code> 元素。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>element&gt;element</td>\n<td>div&gt;p</td>\n<td>选择所有父元素为<code>div</code>的<code>p</code>元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>element+element</td>\n<td>div+p</td>\n<td>选择紧接着<code>div</code>元素之后的所有<code>p</code>元素</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[attribute]</td>\n<td>[target]</td>\n<td>选择带有 target 属性所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[attribute=value]</td>\n<td>[target=_blank]</td>\n<td>选择 target=”_blank” 的所有元素。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>:link</td>\n<td>a:link</td>\n<td>选择所有未被访问的链接。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>:first-letter</td>\n<td>p:first-letter</td>\n<td>选择每个 <code>&lt;p&gt;</code> 元素的首字母。。</td>\n<td>1</td>\n</tr>\n<tr>\n<td>:before</td>\n<td>p:before</td>\n<td>在每个 <code>&lt;p&gt;</code> 元素的内容之前插入内容。</td>\n<td>2</td>\n</tr>\n<tr>\n<td>:first-of-type</td>\n<td>p:first-of-type</td>\n<td>选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>:not(selector)</td>\n<td>:not(p)</td>\n<td>选择非 <code>&lt;p&gt;</code> 元素的每个元素。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p class=\"tip\">上面这些选择器是一些比较常见的选择器，其中也包含了一些CSS3中的新的选择器。<a href=\"http://www.w3school.com.cn/cssref/css_selectors.ASP\" target=\"_blank\" rel=\"noopener\">更多选择器</a></p>\n\n<h4 id=\"4-CSS-哪些属性可以继承\"><a href=\"#4-CSS-哪些属性可以继承\" class=\"headerlink\" title=\"4. CSS 哪些属性可以继承\"></a>4. CSS 哪些属性可以继承</h4><p>CSS 可继承的属性有:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">font-size</span> </span><br><span class=\"line\">* <span class=\"selector-tag\">font-family</span> </span><br><span class=\"line\">* <span class=\"selector-tag\">color</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-CSS3新增伪类有那些\"><a href=\"#5-CSS3新增伪类有那些\" class=\"headerlink\" title=\"5. CSS3新增伪类有那些\"></a>5. CSS3新增伪类有那些</h4><ul>\n<li>p:first-of-type 选择其父元素的首个<code>&lt;p&gt;</code>元素</li>\n<li>p:first-of-type 选择其父元素的最后一个<code>&lt;p&gt;</code>元素</li>\n<li>p:only-of-type 选择属于其父元素唯一的元素</li>\n<li>p:only-child 选择属于其父元素的唯一子元素</li>\n<li>p:nth-child(2) 选择属于其父元素的第二个子元素</li>\n<li>:enabled :disabled 表单控件的禁用状态。</li>\n<li>:checked 单选框或复选框被选中。</li>\n</ul>\n<h4 id=\"6-CSS3有哪些新特性？\"><a href=\"#6-CSS3有哪些新特性？\" class=\"headerlink\" title=\"6. CSS3有哪些新特性？\"></a>6. CSS3有哪些新特性？</h4><ul>\n<li>RGBA和透明度</li>\n<li>background-image background-origin(content-box/padding-box/border-box) background-size background-repeat</li>\n<li>word-wrap（对长的不可分割单词换行）word-wrap：break-word</li>\n<li>文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）</li>\n<li>font-face属性：定义自己的字体</li>\n<li>圆角（边框半径）：border-radius 属性用于创建圆角</li>\n<li>边框图片：border-image: url(border.png) 30 30 round</li>\n<li>盒阴影：box-shadow: 10px 10px 5px #888888</li>\n<li>媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性</li>\n</ul>\n<h4 id=\"7-用纯CSS创建一个三角形的原理\"><a href=\"#7-用纯CSS创建一个三角形的原理\" class=\"headerlink\" title=\"7. 用纯CSS创建一个三角形的原理\"></a>7. 用纯CSS创建一个三角形的原理</h4><p>首先将其宽度和高度设置为0，然后再设置其边框的样式。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 0;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 0;</span><br><span class=\"line\"><span class=\"selector-tag\">border-top</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-left</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-right</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">transparent</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-bottom</span>: 50<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#00ff00</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-清除浮动\"><a href=\"#8-清除浮动\" class=\"headerlink\" title=\"8. 清除浮动\"></a>8. 清除浮动</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">zoom</span>:<span class=\"number\">1</span></span><br><span class=\"line\">  &amp;::after &#123;</span><br><span class=\"line\">    content: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-移动端布局的媒体查询\"><a href=\"#9-移动端布局的媒体查询\" class=\"headerlink\" title=\"9. 移动端布局的媒体查询\"></a>9. 移动端布局的媒体查询</h4><p>通过媒体查询可以为不同大小和尺寸的媒体定义不同的css，适应相应的设备的显示。</p>\n<ul>\n<li><p><head></head>里面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"xxx.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"only screen and (max-device-width:480px)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CSS</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: @media only screen and (max-device-width:480px) &#123;/css样式/&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10-before-和-after中双冒号和单冒号的区别\"><a href=\"#10-before-和-after中双冒号和单冒号的区别\" class=\"headerlink\" title=\"10.  ::before 和 :after中双冒号和单冒号的区别\"></a>10.  ::before 和 :after中双冒号和单冒号的区别</h4><p>1.单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素<br>2.::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。<br>:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after</p>\n<h4 id=\"11-png、jpg、gif、webp图片格式\"><a href=\"#11-png、jpg、gif、webp图片格式\" class=\"headerlink\" title=\"11. png、jpg、gif、webp图片格式\"></a>11. png、jpg、gif、webp图片格式</h4><ul>\n<li>png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。</li>\n<li>jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。</li>\n<li>gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.</li>\n<li>webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。</li>\n</ul>\n<h5 id=\"持续更新中…\"><a href=\"#持续更新中…\" class=\"headerlink\" title=\"持续更新中….\"></a>持续更新中….</h5>"},{"title":"小巧却实用的 javascript 方法","date":"2018-02-08T06:59:36.000Z","summary":"在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。","_content":"在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。\n## 去掉字符串中的空格\n``` javascript\n/**\n *去掉所有空格\n * @param {any} str\n * @param {any} isGlobal\n * @returns\n*/\nlet _trim = (str, isGlobal) => {\n    let result;\n    result = str.replace(/(^\\s+)|(\\s+$)/g, '');\n    if (isGlobal.toLowerCase() === 'g') {\n\tresult = result.replace(/\\s/g, '');\n    }\n    return result;\n};\n```\n<p class='tip'>默认替换字符串首位空格，如果第二个参数为`g`，则替换字符串中所有的空格。</p>\n\n## 获取 url 中参数\n``` javascript\n/**\n * 获取 url 中的参数\n * @param {any} name\n * @returns\n */\nlet _getQueryString = (name) => {\n    let reg = new RegExp('(^|&?)' + name + '=([^&]*)(&|$)', 'i');\n    let r = window.location.search.substr(1).match(reg) || window.location.hash.substr(1).match(reg);\n    if (r != null) {\n        return decodeURIComponent(r[2]);\n    }\n    return null;\n};\n```\n\n## 判断设备\n``` javascript\nlet ua = window.navigator.userAgent;\nlet browser = {\n    isAndroid: () => {\n\treturn ua.match(/Android/i) ? true : false;\n    },\n    isIOS: () => {\n\treturn ua.match(/iPhone|iPad|iPod/i) ? true : false;\n    },\n    isWx: () => {\n\treturn ua.match(/micromessenger/i) ? true : false;\n    },\n    isWp: () => {\n\treturn ua.toLowerCase().indexOf('windows phone') > -1;\n    },\n    isMobile: () => {\n\treturn ua.match(/(iPhone|iPod|Android|ios)/i) ? true : false;\n    },\n    isPC: () => {\n\treturn ua.match(/(iPhone|iPod|Android|ios)/i) ? false : true;\n    }\n};\n\n/* android */\nif (browser.isAndroid()) {\n  console.log('android');\n}\n/* ios */\nif (browser.isIOS()) {\n  console.log('ios');\n}\n/* windows phone */\nif (browser.isWp()) {\n  console.log('windows phone');\n}\n/* weixin */\nif (browser.isWx()) {\n  console.log('weixin');\n}\n/* mobile */\nif (browser.isMobile()) {\n  console.log('Mobile');\n}\n/* pc */\nif (browser.isPC()) {\n  console.log('PC')\n}\n```\n\n## type类型判断\n``` javascript\nisString (o) { //是否字符串\n    return Object.prototype.toString.call(o).slice(8, -1) === 'String'\n}\n\nisNumber (o) { //是否数字\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Number'\n}\n\nisBoolean (o) { //是否boolean\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Boolean'\n}\n\nisFunction (o) { //是否函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Function'\n}\n\nisNull (o) { //是否为null\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Null'\n}\n\nisUndefined (o) { //是否undefined\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined'\n}\n\nisObj (o) { //是否对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'\n}\n\nisArray (o) { //是否数组\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Array'\n}\n\nisDate (o) { //是否时间\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Date'\n}\n\nisRegExp (o) { //是否正则\n    return Object.prototype.toString.call(o).slice(8, -1) === 'RegExp'\n}\n\nisError (o) { //是否错误对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Error'\n}\n\nisSymbol (o) { //是否Symbol函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Symbol'\n}\n\nisPromise (o) { //是否Promise对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Promise'\n}\n\nisSet (o) { //是否Set对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Set'\n}\n\n```\n\n## 交换两个变量的值\n利用 ES6 的解构实现，写法简单，语义非常清晰。\n``` javascript\nlet x = 1;\nlet y = 2;\n[x, y] = [y, x];\nconsole.log(x,y); // 2 1\n```\n\n## 数组去重\n利用ES6 的 Set 数据解构实现\n``` javascript\nfunction dedupe(array) {\n  return Array.from(new Set(array));\n}\n\ndedupe([1, 1, 2, 3]) // [1, 2, 3]","source":"_posts/javascript-function.md","raw":"---\ntitle: 小巧却实用的 javascript 方法\ndate: 2018-02-08 14:59:36\ntags: javascript\nsummary: 在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。\n\n---\n在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。\n## 去掉字符串中的空格\n``` javascript\n/**\n *去掉所有空格\n * @param {any} str\n * @param {any} isGlobal\n * @returns\n*/\nlet _trim = (str, isGlobal) => {\n    let result;\n    result = str.replace(/(^\\s+)|(\\s+$)/g, '');\n    if (isGlobal.toLowerCase() === 'g') {\n\tresult = result.replace(/\\s/g, '');\n    }\n    return result;\n};\n```\n<p class='tip'>默认替换字符串首位空格，如果第二个参数为`g`，则替换字符串中所有的空格。</p>\n\n## 获取 url 中参数\n``` javascript\n/**\n * 获取 url 中的参数\n * @param {any} name\n * @returns\n */\nlet _getQueryString = (name) => {\n    let reg = new RegExp('(^|&?)' + name + '=([^&]*)(&|$)', 'i');\n    let r = window.location.search.substr(1).match(reg) || window.location.hash.substr(1).match(reg);\n    if (r != null) {\n        return decodeURIComponent(r[2]);\n    }\n    return null;\n};\n```\n\n## 判断设备\n``` javascript\nlet ua = window.navigator.userAgent;\nlet browser = {\n    isAndroid: () => {\n\treturn ua.match(/Android/i) ? true : false;\n    },\n    isIOS: () => {\n\treturn ua.match(/iPhone|iPad|iPod/i) ? true : false;\n    },\n    isWx: () => {\n\treturn ua.match(/micromessenger/i) ? true : false;\n    },\n    isWp: () => {\n\treturn ua.toLowerCase().indexOf('windows phone') > -1;\n    },\n    isMobile: () => {\n\treturn ua.match(/(iPhone|iPod|Android|ios)/i) ? true : false;\n    },\n    isPC: () => {\n\treturn ua.match(/(iPhone|iPod|Android|ios)/i) ? false : true;\n    }\n};\n\n/* android */\nif (browser.isAndroid()) {\n  console.log('android');\n}\n/* ios */\nif (browser.isIOS()) {\n  console.log('ios');\n}\n/* windows phone */\nif (browser.isWp()) {\n  console.log('windows phone');\n}\n/* weixin */\nif (browser.isWx()) {\n  console.log('weixin');\n}\n/* mobile */\nif (browser.isMobile()) {\n  console.log('Mobile');\n}\n/* pc */\nif (browser.isPC()) {\n  console.log('PC')\n}\n```\n\n## type类型判断\n``` javascript\nisString (o) { //是否字符串\n    return Object.prototype.toString.call(o).slice(8, -1) === 'String'\n}\n\nisNumber (o) { //是否数字\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Number'\n}\n\nisBoolean (o) { //是否boolean\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Boolean'\n}\n\nisFunction (o) { //是否函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Function'\n}\n\nisNull (o) { //是否为null\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Null'\n}\n\nisUndefined (o) { //是否undefined\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Undefined'\n}\n\nisObj (o) { //是否对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'\n}\n\nisArray (o) { //是否数组\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Array'\n}\n\nisDate (o) { //是否时间\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Date'\n}\n\nisRegExp (o) { //是否正则\n    return Object.prototype.toString.call(o).slice(8, -1) === 'RegExp'\n}\n\nisError (o) { //是否错误对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Error'\n}\n\nisSymbol (o) { //是否Symbol函数\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Symbol'\n}\n\nisPromise (o) { //是否Promise对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Promise'\n}\n\nisSet (o) { //是否Set对象\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Set'\n}\n\n```\n\n## 交换两个变量的值\n利用 ES6 的解构实现，写法简单，语义非常清晰。\n``` javascript\nlet x = 1;\nlet y = 2;\n[x, y] = [y, x];\nconsole.log(x,y); // 2 1\n```\n\n## 数组去重\n利用ES6 的 Set 数据解构实现\n``` javascript\nfunction dedupe(array) {\n  return Array.from(new Set(array));\n}\n\ndedupe([1, 1, 2, 3]) // [1, 2, 3]","slug":"javascript-function","published":1,"updated":"2018-05-30T09:55:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1rn00029xoj76feluws","content":"<p>在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。</p>\n<h2 id=\"去掉字符串中的空格\"><a href=\"#去掉字符串中的空格\" class=\"headerlink\" title=\"去掉字符串中的空格\"></a>去掉字符串中的空格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *去掉所有空格</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; str</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; isGlobal</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _trim = <span class=\"function\">(<span class=\"params\">str, isGlobal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    result = str.replace(<span class=\"regexp\">/(^\\s+)|(\\s+$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isGlobal.toLowerCase() === <span class=\"string\">'g'</span>) &#123;</span><br><span class=\"line\">\tresult = result.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">默认替换字符串首位空格，如果第二个参数为<code>g</code>，则替换字符串中所有的空格。</p>\n\n<h2 id=\"获取-url-中参数\"><a href=\"#获取-url-中参数\" class=\"headerlink\" title=\"获取 url 中参数\"></a>获取 url 中参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 url 中的参数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; name</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _getQueryString = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^|&amp;?)'</span> + name + <span class=\"string\">'=([^&amp;]*)(&amp;|$)'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg) || <span class=\"built_in\">window</span>.location.hash.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断设备\"><a href=\"#判断设备\" class=\"headerlink\" title=\"判断设备\"></a>判断设备</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> browser = &#123;</span><br><span class=\"line\">    isAndroid: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/Android/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isIOS: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/iPhone|iPad|iPod/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isWx: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/micromessenger/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isWp: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.toLowerCase().indexOf(<span class=\"string\">'windows phone'</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isMobile: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/(iPhone|iPod|Android|ios)/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isPC: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/(iPhone|iPod|Android|ios)/i</span>) ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* android */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isAndroid()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'android'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* ios */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isIOS()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ios'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* windows phone */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isWp()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'windows phone'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* weixin */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isWx()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'weixin'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* mobile */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isMobile()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mobile'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* pc */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isPC()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'PC'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"type类型判断\"><a href=\"#type类型判断\" class=\"headerlink\" title=\"type类型判断\"></a>type类型判断</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isString (o) &#123; <span class=\"comment\">//是否字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'String'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNumber (o) &#123; <span class=\"comment\">//是否数字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Number'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isBoolean (o) &#123; <span class=\"comment\">//是否boolean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Boolean'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFunction (o) &#123; <span class=\"comment\">//是否函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Function'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNull (o) &#123; <span class=\"comment\">//是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Null'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isUndefined (o) &#123; <span class=\"comment\">//是否undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Undefined'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isObj (o) &#123; <span class=\"comment\">//是否对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Object'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isArray (o) &#123; <span class=\"comment\">//是否数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isDate (o) &#123; <span class=\"comment\">//是否时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Date'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isRegExp (o) &#123; <span class=\"comment\">//是否正则</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'RegExp'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isError (o) &#123; <span class=\"comment\">//是否错误对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Error'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isSymbol (o) &#123; <span class=\"comment\">//是否Symbol函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Symbol'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isPromise (o) &#123; <span class=\"comment\">//是否Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Promise'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isSet (o) &#123; <span class=\"comment\">//是否Set对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Set'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h2><p>利用 ES6 的解构实现，写法简单，语义非常清晰。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">[x, y] = [y, x];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x,y); <span class=\"comment\">// 2 1</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><p>利用ES6 的 Set 数据解构实现<br>``` javascript<br>function dedupe(array) {<br>  return Array.from(new Set(array));<br>}</p>\n<p>dedupe([1, 1, 2, 3]) // [1, 2, 3]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发中会遇到一些简单实用的方法，比如移动端设备判断，获取url参数或者去掉字符串中的空格等等，这篇博客目的就在于记录下这些方法，持续更新。</p>\n<h2 id=\"去掉字符串中的空格\"><a href=\"#去掉字符串中的空格\" class=\"headerlink\" title=\"去掉字符串中的空格\"></a>去掉字符串中的空格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *去掉所有空格</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; str</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; isGlobal</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _trim = <span class=\"function\">(<span class=\"params\">str, isGlobal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    result = str.replace(<span class=\"regexp\">/(^\\s+)|(\\s+$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isGlobal.toLowerCase() === <span class=\"string\">'g'</span>) &#123;</span><br><span class=\"line\">\tresult = result.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">默认替换字符串首位空格，如果第二个参数为<code>g</code>，则替换字符串中所有的空格。</p>\n\n<h2 id=\"获取-url-中参数\"><a href=\"#获取-url-中参数\" class=\"headerlink\" title=\"获取 url 中参数\"></a>获取 url 中参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 url 中的参数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;any&#125; name</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _getQueryString = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(^|&amp;?)'</span> + name + <span class=\"string\">'=([^&amp;]*)(&amp;|$)'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg) || <span class=\"built_in\">window</span>.location.hash.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断设备\"><a href=\"#判断设备\" class=\"headerlink\" title=\"判断设备\"></a>判断设备</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent;</span><br><span class=\"line\"><span class=\"keyword\">let</span> browser = &#123;</span><br><span class=\"line\">    isAndroid: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/Android/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isIOS: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/iPhone|iPad|iPod/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isWx: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/micromessenger/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isWp: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.toLowerCase().indexOf(<span class=\"string\">'windows phone'</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isMobile: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/(iPhone|iPod|Android|ios)/i</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isPC: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ua.match(<span class=\"regexp\">/(iPhone|iPod|Android|ios)/i</span>) ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* android */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isAndroid()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'android'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* ios */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isIOS()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ios'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* windows phone */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isWp()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'windows phone'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* weixin */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isWx()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'weixin'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* mobile */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isMobile()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mobile'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* pc */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (browser.isPC()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'PC'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"type类型判断\"><a href=\"#type类型判断\" class=\"headerlink\" title=\"type类型判断\"></a>type类型判断</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isString (o) &#123; <span class=\"comment\">//是否字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'String'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNumber (o) &#123; <span class=\"comment\">//是否数字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Number'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isBoolean (o) &#123; <span class=\"comment\">//是否boolean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Boolean'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isFunction (o) &#123; <span class=\"comment\">//是否函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Function'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isNull (o) &#123; <span class=\"comment\">//是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Null'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isUndefined (o) &#123; <span class=\"comment\">//是否undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Undefined'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isObj (o) &#123; <span class=\"comment\">//是否对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Object'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isArray (o) &#123; <span class=\"comment\">//是否数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isDate (o) &#123; <span class=\"comment\">//是否时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Date'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isRegExp (o) &#123; <span class=\"comment\">//是否正则</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'RegExp'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isError (o) &#123; <span class=\"comment\">//是否错误对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Error'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isSymbol (o) &#123; <span class=\"comment\">//是否Symbol函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Symbol'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isPromise (o) &#123; <span class=\"comment\">//是否Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Promise'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isSet (o) &#123; <span class=\"comment\">//是否Set对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Set'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"交换两个变量的值\"><a href=\"#交换两个变量的值\" class=\"headerlink\" title=\"交换两个变量的值\"></a>交换两个变量的值</h2><p>利用 ES6 的解构实现，写法简单，语义非常清晰。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">[x, y] = [y, x];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x,y); <span class=\"comment\">// 2 1</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><p>利用ES6 的 Set 数据解构实现<br>``` javascript<br>function dedupe(array) {<br>  return Array.from(new Set(array));<br>}</p>\n<p>dedupe([1, 1, 2, 3]) // [1, 2, 3]</p>\n"},{"title":"javascript 遍历方法汇总","date":"2018-02-11T08:02:54.000Z","summary":"对于数组中的遍历也许再熟悉不过，感觉从最开始接触C语言的时候就遇到了遍历...下面就一起来说说`javascript`中的遍历方法，以及他们之间的性能比较。","_content":"对于数组中的遍历也许再熟悉不过，感觉从最开始接触`C`语言的时候就遇到了遍历...下面就一起来说说`javascript`中的遍历方法，以及他们之间的性能比较。\n## for 循环语句\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\n\n// for 循环语句\nfor (let i = 0; i < tempArry.length; i++) {\n  console.log(tempArry[i]);\n}\n```\n> 性能解读：这是我们最熟悉的一种遍历方式，也是最简单，使用频率最高的。他的性能虽然不弱，但是由于每次遍历都需要重新定义变量，因此还可以进行改进\n\n####  for 循环语句 改进\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor (let i = 0, len = tempArry.length; i < len; i++) {\n  console.log(tempArry[i]);\n}\n```\n> 减少了变量的定义，提高了遍历的性能，而且这种遍历方式性能最优。\n\n## forEach\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\ntempArry.forEach((value, key, arry) => {\n  console.log(value); // 依次输出 1,2,3,4,5，\n  console.log(key); // 依次输出 0,1,2,3,4\n  console.log(arry); // 始终输出 [1,2,3,4,5]\n})\n```\n> `forEach`方法是数组内置方法，他的好处在于不用重新定义一系列变量，便于使用，但是从效率以及性能角度来说它是劣于原始for循环,而且`forEach`不支持`return`。\n\n## map\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryMap = tempArry.map((value, key, arry) => {\n  console.log(value);\n  console.log(key);\n  console.log(arry);\n  return value + 1;\n})\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryMap); // 结果为 [2, 3, 4, 5, 6]\n```\n> `map`也是数组的内置方法，写法与`forEach`没有什么不一样的，不同点在于`map`可以改变当前循环的值，而`forEach`则不可以。因此`map`一般用来处理需要修改某一个数组的值，在效率以及性能上也不如原始的`for`循环。\n\n## filter\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryFilter = tempArry.filter((value, key, arry) => {\n  console.log(value);\n  console.log(key);\n  console.log(arry);\n  if (value === 5) {\n    return false;\n  }\n  return true;\n})\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryFilter); // 结果为 [1, 2, 3, 4]\n```\n> `filter`也是数组内置的方法，`filter`和`map`不同，`map`目的是为了改变值，而`filter`目的是为了去掉不要的值，在循环的时候如果返回的是`false`那么就表示本次循环的不添加该值，返回`true`则相反是表示要添加到新建的数组中\n\n## reduce\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryReduce = tempArry.reduce((count, value,key,arry)=> {\n  console.log(count);  // 依次为  0,1,3,6,10\n  console.log(value);  // 依次为 1,2,3,4,5\n  console.log(key);  // 0,1,2,3,4\n  console.log(arry)  // 始终为 [1,2,3,4,5]\n  return count + value;\n},0);\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryReduce)  // 结果为 16\n```\n> `reduce`的不同之处在于累加，和其他几个内置方法不同的地方，它的第二个参数不是`this`对象，而是初始累加值（如果不设置的话数组会乱掉），而且回调函数的的个数也不同，比其他的多了一个，而且还在在开始的多加了一个参数，第一个参数记录的是上一次循环的累加值\n\n## some\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArrySome = tempArry.some((value,key,arry)=> {  \n  console.log(value);  // 依次为 1,2,3 \n  console.log(key);   // 0,1,2\n  console.log(arry) // 始终为[1, 2, 3, 4, 5]\n  return value === 3;\n});\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArrySome)  // true\n```\n> `some`的不同之处在它返回的布尔值，它的作用有点像filter，不过它的目的不是为了筛选返回数组，而是为了筛选该数组是否有满足你要的值，而且找到符合条件的值返回了一次`true`之后就不会再继续执行了\n\n## every\n``` javascript\n// [...].every(ck)函数,某一个为false，则返回false,如果全部返回true，则返回true  \nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryEvery = tempArry.every((value,key,arry)=> {  \n  console.log(value);  // 1\n  console.log(key);   // 0\n  console.log(arry) // 始终为[1, 2, 3, 4, 5]\n  return value === 3;\n});\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArryEvery)  // false\n```\n> 每个数组元素都执行一次`ck`函数，直到某个元素执行函数`ck`返回`false`,如果返回`false`则直接返回`false`,如果全部返回`true`，则返回`true`\n\n## indexOf\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryIndexOf = tempArry.indexOf(3);\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArryIndexOf)  // 2\n```\n> 对于`indexOf`方法来说，在数组循环过程中会和传入的参数比对，如果是比对成功，那么终止循环，返回对比成功的下标。\n\n## lastIndexOf\n``` javascript\nlet tempArry = [1,2,3,4,5,4,3,4,5]\nlet tempArryLastIndexOf = tempArry.lastIndexOf(5);\nconsole.log(tempArry); // [1,2,3,4,5,4,3,4,5]\nconsole.log(tempArryLastIndexOf)  // 8\n```\n> lastIndexOf方法和indexOf作用一致，但查找方向不同，indexOf是正向查找，lastIndexOf是逆向查找，找到之后返回成功的下标\n\n<p class=\"tip\">小结：对于以上8个数组的内置方法，forEach方法仅仅只是为了循环，并不可以帮你做额外的事情；map方法相当于在循环的时候你告诉数组当前遍历的这个值需要改成什么样，那么它就会最后给什么样的数组；filter方法相当于在循环的时候数组遍历一个个对象，并问你这个是不是你要找的值，如果你说是，他就会给你返回一个到新的数组中，不是他就会剔除；reduce方法相当于循环遍历对象做统计（累加或者累减之类的）;some和every方法相当于在遍历的时候拿着一个个对象问你这个是不是你找的，只要你说了一遍是，那么他就会给你分别返回的是true和false；indexOf和lastIndexOf方法相当于你告诉它你要找什么值，找到之后立马返回给你它的门牌号。</p>\n\n## for...in\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor (let key in tempArry) {\n  console.log(key); // 依次输出 0,1,2,3,4\n}\n\nlet tempArryIn = {\n  '1': 'a',\n  '2': 'b',\n  '3': 'c'\n};\nfor (let key in tempArryIn) {\n console.log(key); // 依次输出 1,2,3\n```\n> 从结果得知,for...in遍历数组的时候是遍历数组的下标值，而在遍历对象的时候遍历的是key值\n\n<p class=\"tip\">在进行遍历的时候不推荐使用`for...in`</p>\n\n## for...of\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor(let value of tempArry) {\n  console.log(value); // 依次输入 1,2,3,4,5\n}\n```\n> `for...of`语句遍历的是值，而不是下标，但`for...of`不支持循环对象。\n\n<p class=\"tip\">总结：通过上面几种遍历方法可以看出，原始`for`的循环的效率和性能最高，尤其是在数据越多的时候它的优势体现的越明显，其他的方法可以根据需求灵活的选择。</p>","source":"_posts/javascript-traverse.md","raw":"---\ntitle: javascript 遍历方法汇总\ndate: 2018-02-11 16:02:54\ntags: javascript\nsummary: 对于数组中的遍历也许再熟悉不过，感觉从最开始接触C语言的时候就遇到了遍历...下面就一起来说说`javascript`中的遍历方法，以及他们之间的性能比较。\n---\n对于数组中的遍历也许再熟悉不过，感觉从最开始接触`C`语言的时候就遇到了遍历...下面就一起来说说`javascript`中的遍历方法，以及他们之间的性能比较。\n## for 循环语句\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\n\n// for 循环语句\nfor (let i = 0; i < tempArry.length; i++) {\n  console.log(tempArry[i]);\n}\n```\n> 性能解读：这是我们最熟悉的一种遍历方式，也是最简单，使用频率最高的。他的性能虽然不弱，但是由于每次遍历都需要重新定义变量，因此还可以进行改进\n\n####  for 循环语句 改进\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor (let i = 0, len = tempArry.length; i < len; i++) {\n  console.log(tempArry[i]);\n}\n```\n> 减少了变量的定义，提高了遍历的性能，而且这种遍历方式性能最优。\n\n## forEach\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\ntempArry.forEach((value, key, arry) => {\n  console.log(value); // 依次输出 1,2,3,4,5，\n  console.log(key); // 依次输出 0,1,2,3,4\n  console.log(arry); // 始终输出 [1,2,3,4,5]\n})\n```\n> `forEach`方法是数组内置方法，他的好处在于不用重新定义一系列变量，便于使用，但是从效率以及性能角度来说它是劣于原始for循环,而且`forEach`不支持`return`。\n\n## map\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryMap = tempArry.map((value, key, arry) => {\n  console.log(value);\n  console.log(key);\n  console.log(arry);\n  return value + 1;\n})\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryMap); // 结果为 [2, 3, 4, 5, 6]\n```\n> `map`也是数组的内置方法，写法与`forEach`没有什么不一样的，不同点在于`map`可以改变当前循环的值，而`forEach`则不可以。因此`map`一般用来处理需要修改某一个数组的值，在效率以及性能上也不如原始的`for`循环。\n\n## filter\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryFilter = tempArry.filter((value, key, arry) => {\n  console.log(value);\n  console.log(key);\n  console.log(arry);\n  if (value === 5) {\n    return false;\n  }\n  return true;\n})\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryFilter); // 结果为 [1, 2, 3, 4]\n```\n> `filter`也是数组内置的方法，`filter`和`map`不同，`map`目的是为了改变值，而`filter`目的是为了去掉不要的值，在循环的时候如果返回的是`false`那么就表示本次循环的不添加该值，返回`true`则相反是表示要添加到新建的数组中\n\n## reduce\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryReduce = tempArry.reduce((count, value,key,arry)=> {\n  console.log(count);  // 依次为  0,1,3,6,10\n  console.log(value);  // 依次为 1,2,3,4,5\n  console.log(key);  // 0,1,2,3,4\n  console.log(arry)  // 始终为 [1,2,3,4,5]\n  return count + value;\n},0);\nconsole.log(tempArry); // 结果为 [1, 2, 3, 4, 5]\nconsole.log(tempArryReduce)  // 结果为 16\n```\n> `reduce`的不同之处在于累加，和其他几个内置方法不同的地方，它的第二个参数不是`this`对象，而是初始累加值（如果不设置的话数组会乱掉），而且回调函数的的个数也不同，比其他的多了一个，而且还在在开始的多加了一个参数，第一个参数记录的是上一次循环的累加值\n\n## some\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArrySome = tempArry.some((value,key,arry)=> {  \n  console.log(value);  // 依次为 1,2,3 \n  console.log(key);   // 0,1,2\n  console.log(arry) // 始终为[1, 2, 3, 4, 5]\n  return value === 3;\n});\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArrySome)  // true\n```\n> `some`的不同之处在它返回的布尔值，它的作用有点像filter，不过它的目的不是为了筛选返回数组，而是为了筛选该数组是否有满足你要的值，而且找到符合条件的值返回了一次`true`之后就不会再继续执行了\n\n## every\n``` javascript\n// [...].every(ck)函数,某一个为false，则返回false,如果全部返回true，则返回true  \nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryEvery = tempArry.every((value,key,arry)=> {  \n  console.log(value);  // 1\n  console.log(key);   // 0\n  console.log(arry) // 始终为[1, 2, 3, 4, 5]\n  return value === 3;\n});\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArryEvery)  // false\n```\n> 每个数组元素都执行一次`ck`函数，直到某个元素执行函数`ck`返回`false`,如果返回`false`则直接返回`false`,如果全部返回`true`，则返回`true`\n\n## indexOf\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nlet tempArryIndexOf = tempArry.indexOf(3);\nconsole.log(tempArry); // [1, 2, 3, 4, 5]\nconsole.log(tempArryIndexOf)  // 2\n```\n> 对于`indexOf`方法来说，在数组循环过程中会和传入的参数比对，如果是比对成功，那么终止循环，返回对比成功的下标。\n\n## lastIndexOf\n``` javascript\nlet tempArry = [1,2,3,4,5,4,3,4,5]\nlet tempArryLastIndexOf = tempArry.lastIndexOf(5);\nconsole.log(tempArry); // [1,2,3,4,5,4,3,4,5]\nconsole.log(tempArryLastIndexOf)  // 8\n```\n> lastIndexOf方法和indexOf作用一致，但查找方向不同，indexOf是正向查找，lastIndexOf是逆向查找，找到之后返回成功的下标\n\n<p class=\"tip\">小结：对于以上8个数组的内置方法，forEach方法仅仅只是为了循环，并不可以帮你做额外的事情；map方法相当于在循环的时候你告诉数组当前遍历的这个值需要改成什么样，那么它就会最后给什么样的数组；filter方法相当于在循环的时候数组遍历一个个对象，并问你这个是不是你要找的值，如果你说是，他就会给你返回一个到新的数组中，不是他就会剔除；reduce方法相当于循环遍历对象做统计（累加或者累减之类的）;some和every方法相当于在遍历的时候拿着一个个对象问你这个是不是你找的，只要你说了一遍是，那么他就会给你分别返回的是true和false；indexOf和lastIndexOf方法相当于你告诉它你要找什么值，找到之后立马返回给你它的门牌号。</p>\n\n## for...in\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor (let key in tempArry) {\n  console.log(key); // 依次输出 0,1,2,3,4\n}\n\nlet tempArryIn = {\n  '1': 'a',\n  '2': 'b',\n  '3': 'c'\n};\nfor (let key in tempArryIn) {\n console.log(key); // 依次输出 1,2,3\n```\n> 从结果得知,for...in遍历数组的时候是遍历数组的下标值，而在遍历对象的时候遍历的是key值\n\n<p class=\"tip\">在进行遍历的时候不推荐使用`for...in`</p>\n\n## for...of\n``` javascript\nlet tempArry = [1, 2, 3, 4, 5];\nfor(let value of tempArry) {\n  console.log(value); // 依次输入 1,2,3,4,5\n}\n```\n> `for...of`语句遍历的是值，而不是下标，但`for...of`不支持循环对象。\n\n<p class=\"tip\">总结：通过上面几种遍历方法可以看出，原始`for`的循环的效率和性能最高，尤其是在数据越多的时候它的优势体现的越明显，其他的方法可以根据需求灵活的选择。</p>","slug":"javascript-traverse","published":1,"updated":"2018-05-30T09:55:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1rs00059xoj17yuopum","content":"<p>对于数组中的遍历也许再熟悉不过，感觉从最开始接触<code>C</code>语言的时候就遇到了遍历…下面就一起来说说<code>javascript</code>中的遍历方法，以及他们之间的性能比较。</p>\n<h2 id=\"for-循环语句\"><a href=\"#for-循环语句\" class=\"headerlink\" title=\"for 循环语句\"></a>for 循环语句</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for 循环语句</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tempArry.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tempArry[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>性能解读：这是我们最熟悉的一种遍历方式，也是最简单，使用频率最高的。他的性能虽然不弱，但是由于每次遍历都需要重新定义变量，因此还可以进行改进</p>\n</blockquote>\n<h4 id=\"for-循环语句-改进\"><a href=\"#for-循环语句-改进\" class=\"headerlink\" title=\"for 循环语句 改进\"></a>for 循环语句 改进</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = tempArry.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tempArry[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>减少了变量的定义，提高了遍历的性能，而且这种遍历方式性能最优。</p>\n</blockquote>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">tempArry.forEach(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 依次输出 1,2,3,4,5，</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 0,1,2,3,4</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry); <span class=\"comment\">// 始终输出 [1,2,3,4,5]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>forEach</code>方法是数组内置方法，他的好处在于不用重新定义一系列变量，便于使用，但是从效率以及性能角度来说它是劣于原始for循环,而且<code>forEach</code>不支持<code>return</code>。</p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryMap = tempArry.map(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryMap); <span class=\"comment\">// 结果为 [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>map</code>也是数组的内置方法，写法与<code>forEach</code>没有什么不一样的，不同点在于<code>map</code>可以改变当前循环的值，而<code>forEach</code>则不可以。因此<code>map</code>一般用来处理需要修改某一个数组的值，在效率以及性能上也不如原始的<code>for</code>循环。</p>\n</blockquote>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryFilter = tempArry.filter(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryFilter); <span class=\"comment\">// 结果为 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>filter</code>也是数组内置的方法，<code>filter</code>和<code>map</code>不同，<code>map</code>目的是为了改变值，而<code>filter</code>目的是为了去掉不要的值，在循环的时候如果返回的是<code>false</code>那么就表示本次循环的不添加该值，返回<code>true</code>则相反是表示要添加到新建的数组中</p>\n</blockquote>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryReduce = tempArry.reduce(<span class=\"function\">(<span class=\"params\">count, value,key,arry</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(count);  <span class=\"comment\">// 依次为  0,1,3,6,10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 依次为 1,2,3,4,5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);  <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry)  <span class=\"comment\">// 始终为 [1,2,3,4,5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count + value;</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryReduce)  <span class=\"comment\">// 结果为 16</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>reduce</code>的不同之处在于累加，和其他几个内置方法不同的地方，它的第二个参数不是<code>this</code>对象，而是初始累加值（如果不设置的话数组会乱掉），而且回调函数的的个数也不同，比其他的多了一个，而且还在在开始的多加了一个参数，第一个参数记录的是上一次循环的累加值</p>\n</blockquote>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArrySome = tempArry.some(<span class=\"function\">(<span class=\"params\">value,key,arry</span>)=&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 依次为 1,2,3 </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);   <span class=\"comment\">// 0,1,2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry) <span class=\"comment\">// 始终为[1, 2, 3, 4, 5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value === <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArrySome)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>some</code>的不同之处在它返回的布尔值，它的作用有点像filter，不过它的目的不是为了筛选返回数组，而是为了筛选该数组是否有满足你要的值，而且找到符合条件的值返回了一次<code>true</code>之后就不会再继续执行了</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [...].every(ck)函数,某一个为false，则返回false,如果全部返回true，则返回true  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryEvery = tempArry.every(<span class=\"function\">(<span class=\"params\">value,key,arry</span>)=&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);   <span class=\"comment\">// 0</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry) <span class=\"comment\">// 始终为[1, 2, 3, 4, 5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value === <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryEvery)  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每个数组元素都执行一次<code>ck</code>函数，直到某个元素执行函数<code>ck</code>返回<code>false</code>,如果返回<code>false</code>则直接返回<code>false</code>,如果全部返回<code>true</code>，则返回<code>true</code></p>\n</blockquote>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryIndexOf = tempArry.indexOf(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryIndexOf)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于<code>indexOf</code>方法来说，在数组循环过程中会和传入的参数比对，如果是比对成功，那么终止循环，返回对比成功的下标。</p>\n</blockquote>\n<h2 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a>lastIndexOf</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryLastIndexOf = tempArry.lastIndexOf(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1,2,3,4,5,4,3,4,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryLastIndexOf)  <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>lastIndexOf方法和indexOf作用一致，但查找方向不同，indexOf是正向查找，lastIndexOf是逆向查找，找到之后返回成功的下标</p>\n</blockquote>\n<p class=\"tip\">小结：对于以上8个数组的内置方法，forEach方法仅仅只是为了循环，并不可以帮你做额外的事情；map方法相当于在循环的时候你告诉数组当前遍历的这个值需要改成什么样，那么它就会最后给什么样的数组；filter方法相当于在循环的时候数组遍历一个个对象，并问你这个是不是你要找的值，如果你说是，他就会给你返回一个到新的数组中，不是他就会剔除；reduce方法相当于循环遍历对象做统计（累加或者累减之类的）;some和every方法相当于在遍历的时候拿着一个个对象问你这个是不是你找的，只要你说了一遍是，那么他就会给你分别返回的是true和false；indexOf和lastIndexOf方法相当于你告诉它你要找什么值，找到之后立马返回给你它的门牌号。</p>\n\n<h2 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> tempArry) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryIn = &#123;</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'3'</span>: <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> tempArryIn) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从结果得知,for…in遍历数组的时候是遍历数组的下标值，而在遍历对象的时候遍历的是key值</p>\n</blockquote>\n<p class=\"tip\">在进行遍历的时候不推荐使用<code>for...in</code></p>\n\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> tempArry) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 依次输入 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>for...of</code>语句遍历的是值，而不是下标，但<code>for...of</code>不支持循环对象。</p>\n</blockquote>\n<p class=\"tip\">总结：通过上面几种遍历方法可以看出，原始<code>for</code>的循环的效率和性能最高，尤其是在数据越多的时候它的优势体现的越明显，其他的方法可以根据需求灵活的选择。</p>","site":{"data":{}},"excerpt":"","more":"<p>对于数组中的遍历也许再熟悉不过，感觉从最开始接触<code>C</code>语言的时候就遇到了遍历…下面就一起来说说<code>javascript</code>中的遍历方法，以及他们之间的性能比较。</p>\n<h2 id=\"for-循环语句\"><a href=\"#for-循环语句\" class=\"headerlink\" title=\"for 循环语句\"></a>for 循环语句</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for 循环语句</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tempArry.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tempArry[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>性能解读：这是我们最熟悉的一种遍历方式，也是最简单，使用频率最高的。他的性能虽然不弱，但是由于每次遍历都需要重新定义变量，因此还可以进行改进</p>\n</blockquote>\n<h4 id=\"for-循环语句-改进\"><a href=\"#for-循环语句-改进\" class=\"headerlink\" title=\"for 循环语句 改进\"></a>for 循环语句 改进</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = tempArry.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tempArry[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>减少了变量的定义，提高了遍历的性能，而且这种遍历方式性能最优。</p>\n</blockquote>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">tempArry.forEach(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 依次输出 1,2,3,4,5，</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 0,1,2,3,4</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry); <span class=\"comment\">// 始终输出 [1,2,3,4,5]</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>forEach</code>方法是数组内置方法，他的好处在于不用重新定义一系列变量，便于使用，但是从效率以及性能角度来说它是劣于原始for循环,而且<code>forEach</code>不支持<code>return</code>。</p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryMap = tempArry.map(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryMap); <span class=\"comment\">// 结果为 [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>map</code>也是数组的内置方法，写法与<code>forEach</code>没有什么不一样的，不同点在于<code>map</code>可以改变当前循环的值，而<code>forEach</code>则不可以。因此<code>map</code>一般用来处理需要修改某一个数组的值，在效率以及性能上也不如原始的<code>for</code>循环。</p>\n</blockquote>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryFilter = tempArry.filter(<span class=\"function\">(<span class=\"params\">value, key, arry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryFilter); <span class=\"comment\">// 结果为 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>filter</code>也是数组内置的方法，<code>filter</code>和<code>map</code>不同，<code>map</code>目的是为了改变值，而<code>filter</code>目的是为了去掉不要的值，在循环的时候如果返回的是<code>false</code>那么就表示本次循环的不添加该值，返回<code>true</code>则相反是表示要添加到新建的数组中</p>\n</blockquote>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryReduce = tempArry.reduce(<span class=\"function\">(<span class=\"params\">count, value,key,arry</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(count);  <span class=\"comment\">// 依次为  0,1,3,6,10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 依次为 1,2,3,4,5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);  <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry)  <span class=\"comment\">// 始终为 [1,2,3,4,5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count + value;</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// 结果为 [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryReduce)  <span class=\"comment\">// 结果为 16</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>reduce</code>的不同之处在于累加，和其他几个内置方法不同的地方，它的第二个参数不是<code>this</code>对象，而是初始累加值（如果不设置的话数组会乱掉），而且回调函数的的个数也不同，比其他的多了一个，而且还在在开始的多加了一个参数，第一个参数记录的是上一次循环的累加值</p>\n</blockquote>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArrySome = tempArry.some(<span class=\"function\">(<span class=\"params\">value,key,arry</span>)=&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 依次为 1,2,3 </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);   <span class=\"comment\">// 0,1,2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry) <span class=\"comment\">// 始终为[1, 2, 3, 4, 5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value === <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArrySome)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>some</code>的不同之处在它返回的布尔值，它的作用有点像filter，不过它的目的不是为了筛选返回数组，而是为了筛选该数组是否有满足你要的值，而且找到符合条件的值返回了一次<code>true</code>之后就不会再继续执行了</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [...].every(ck)函数,某一个为false，则返回false,如果全部返回true，则返回true  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryEvery = tempArry.every(<span class=\"function\">(<span class=\"params\">value,key,arry</span>)=&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);   <span class=\"comment\">// 0</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arry) <span class=\"comment\">// 始终为[1, 2, 3, 4, 5]</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value === <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryEvery)  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每个数组元素都执行一次<code>ck</code>函数，直到某个元素执行函数<code>ck</code>返回<code>false</code>,如果返回<code>false</code>则直接返回<code>false</code>,如果全部返回<code>true</code>，则返回<code>true</code></p>\n</blockquote>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryIndexOf = tempArry.indexOf(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryIndexOf)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于<code>indexOf</code>方法来说，在数组循环过程中会和传入的参数比对，如果是比对成功，那么终止循环，返回对比成功的下标。</p>\n</blockquote>\n<h2 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a>lastIndexOf</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryLastIndexOf = tempArry.lastIndexOf(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArry); <span class=\"comment\">// [1,2,3,4,5,4,3,4,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tempArryLastIndexOf)  <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>lastIndexOf方法和indexOf作用一致，但查找方向不同，indexOf是正向查找，lastIndexOf是逆向查找，找到之后返回成功的下标</p>\n</blockquote>\n<p class=\"tip\">小结：对于以上8个数组的内置方法，forEach方法仅仅只是为了循环，并不可以帮你做额外的事情；map方法相当于在循环的时候你告诉数组当前遍历的这个值需要改成什么样，那么它就会最后给什么样的数组；filter方法相当于在循环的时候数组遍历一个个对象，并问你这个是不是你要找的值，如果你说是，他就会给你返回一个到新的数组中，不是他就会剔除；reduce方法相当于循环遍历对象做统计（累加或者累减之类的）;some和every方法相当于在遍历的时候拿着一个个对象问你这个是不是你找的，只要你说了一遍是，那么他就会给你分别返回的是true和false；indexOf和lastIndexOf方法相当于你告诉它你要找什么值，找到之后立马返回给你它的门牌号。</p>\n\n<h2 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> tempArry) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tempArryIn = &#123;</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'3'</span>: <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> tempArryIn) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 依次输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从结果得知,for…in遍历数组的时候是遍历数组的下标值，而在遍历对象的时候遍历的是key值</p>\n</blockquote>\n<p class=\"tip\">在进行遍历的时候不推荐使用<code>for...in</code></p>\n\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> tempArry) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 依次输入 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>for...of</code>语句遍历的是值，而不是下标，但<code>for...of</code>不支持循环对象。</p>\n</blockquote>\n<p class=\"tip\">总结：通过上面几种遍历方法可以看出，原始<code>for</code>的循环的效率和性能最高，尤其是在数据越多的时候它的优势体现的越明显，其他的方法可以根据需求灵活的选择。</p>"},{"title":"用 vue 写小程序，基于 mpvue 框架重写 weui","date":"2018-03-19T16:01:30.000Z","summary":"上周美团开源了 mpvue 框架，他基于 Vue.js 的小程序开发框架，从底层支持 Vue.js 语法和构建工具体系。what，小程序可以用 vue 写了？简直有点不太敢确定，看了一下简介，没错，真的可以用 vue 开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。","_content":"# [mpvue-weui](https://github.com/KuangPF/mpvue-weui)\n\n## 前言\n上周美团开源了 [mpvue](https://github.com/Meituan-Dianping/mpvue) 框架，他基于` Vue.js` 的小程序开发框架，从底层支持 `Vue.js` 语法和构建工具体系。what，小程序可以用`vue`写了？简直有点不太敢确定，花了[5分钟](http://mpvue.com/mpvue/quickstart/)看了一下简介，没错，真的可以用`vue`开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。\n\n## 重写 `WeUI`\n俗话说，**第一个吃螃蟹的人，总要踩一些坑**（俗话有这么说过？）。[WeUI](https://weui.io/)是微信的官方 UI 库，在小程序中或者移动端使用的非常多，那么就有了一些想法:用 `mpvue` 重写 `WeUI`。\n\n##  `mpvue-weui`是什么\n也许 `mpvue-weui` 的内容不像它的名字那么高大上，它不是一个UI库（原谅我霸占了这么好的名字），其实它就是一个 `WeUI`的 demo 库，就像 [WeUI](https://weui.io/)一样，只不过是基于 `mpvue` 框架重写了一下。\n\n## 重写目的\n其实重写的目的就是看看`mpvue`好不好用，里面有哪些坑，然后将它写成[文档](https://kuangpf.github.io/mpvue-weui/#/)的形式，从而避免基于`mpvue`框架开发的人再次踩坑。\n\n## 重写感受\n当重写完了以后，发现最大的感受就是：\n\n* 开发体验很棒，VSCode(IDE 自选)写代码，小程序开发工具开效果；\n* 对小程序官方组件和 API 支持的非常完美；\n* 快捷的 webpack 构建机制，开发过程中热更新.\n* ...\n\n这次主要是重写 `Weui`，可能在自定义组件交互方面还没涉及，比如可以使用`vuex`进行状态管理，或者将来要支持`vue-router`。总之很好用，为美团点赞。\n\n## 重写效果\n\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e73e631622d?w=381&h=670&f=png&s=12631)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e7707ec3aac?w=378&h=670&f=png&s=14440)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e7fae68699b?w=376&h=669&f=png&s=6951)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e81004b17b2?w=377&h=670&f=png&s=8907)\n\n## 踩坑文档\n[mpvue-weui 踩坑文档](https://kuangpf.github.io/mpvue-weui/#/)\n\ntip: 文档会随着`mpvue`新语法或者新特性的更新而继续完善。\n\n## 相关申明\n\n1. 本项目[mpvue-weui](https://github.com/KuangPF/mpvue-weui)主要使用了 [weui-wxss](https://github.com/Tencent/weui-wxss) 中的相关文件，主要目的在于交流学习，如果冒犯了相关的开源协议，实属抱歉。\n2. 这篇文档是自己在重写了 `WeUI` 以后记录的，如果有说的不对的地方还希望各位大佬指出，一起学习。\n\n\n\n","source":"_posts/mpvue-weui.md","raw":"---\ntitle: 用 vue 写小程序，基于 mpvue 框架重写 weui\ndate: 2018-03-20 00:01:30\ntags: [mpvue,vue,小程序]\nsummary: 上周美团开源了 mpvue 框架，他基于 Vue.js 的小程序开发框架，从底层支持 Vue.js 语法和构建工具体系。what，小程序可以用 vue 写了？简直有点不太敢确定，看了一下简介，没错，真的可以用 vue 开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。\n---\n# [mpvue-weui](https://github.com/KuangPF/mpvue-weui)\n\n## 前言\n上周美团开源了 [mpvue](https://github.com/Meituan-Dianping/mpvue) 框架，他基于` Vue.js` 的小程序开发框架，从底层支持 `Vue.js` 语法和构建工具体系。what，小程序可以用`vue`写了？简直有点不太敢确定，花了[5分钟](http://mpvue.com/mpvue/quickstart/)看了一下简介，没错，真的可以用`vue`开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。\n\n## 重写 `WeUI`\n俗话说，**第一个吃螃蟹的人，总要踩一些坑**（俗话有这么说过？）。[WeUI](https://weui.io/)是微信的官方 UI 库，在小程序中或者移动端使用的非常多，那么就有了一些想法:用 `mpvue` 重写 `WeUI`。\n\n##  `mpvue-weui`是什么\n也许 `mpvue-weui` 的内容不像它的名字那么高大上，它不是一个UI库（原谅我霸占了这么好的名字），其实它就是一个 `WeUI`的 demo 库，就像 [WeUI](https://weui.io/)一样，只不过是基于 `mpvue` 框架重写了一下。\n\n## 重写目的\n其实重写的目的就是看看`mpvue`好不好用，里面有哪些坑，然后将它写成[文档](https://kuangpf.github.io/mpvue-weui/#/)的形式，从而避免基于`mpvue`框架开发的人再次踩坑。\n\n## 重写感受\n当重写完了以后，发现最大的感受就是：\n\n* 开发体验很棒，VSCode(IDE 自选)写代码，小程序开发工具开效果；\n* 对小程序官方组件和 API 支持的非常完美；\n* 快捷的 webpack 构建机制，开发过程中热更新.\n* ...\n\n这次主要是重写 `Weui`，可能在自定义组件交互方面还没涉及，比如可以使用`vuex`进行状态管理，或者将来要支持`vue-router`。总之很好用，为美团点赞。\n\n## 重写效果\n\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e73e631622d?w=381&h=670&f=png&s=12631)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e7707ec3aac?w=378&h=670&f=png&s=14440)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e7fae68699b?w=376&h=669&f=png&s=6951)\n![](https://user-gold-cdn.xitu.io/2018/3/14/16224e81004b17b2?w=377&h=670&f=png&s=8907)\n\n## 踩坑文档\n[mpvue-weui 踩坑文档](https://kuangpf.github.io/mpvue-weui/#/)\n\ntip: 文档会随着`mpvue`新语法或者新特性的更新而继续完善。\n\n## 相关申明\n\n1. 本项目[mpvue-weui](https://github.com/KuangPF/mpvue-weui)主要使用了 [weui-wxss](https://github.com/Tencent/weui-wxss) 中的相关文件，主要目的在于交流学习，如果冒犯了相关的开源协议，实属抱歉。\n2. 这篇文档是自己在重写了 `WeUI` 以后记录的，如果有说的不对的地方还希望各位大佬指出，一起学习。\n\n\n\n","slug":"mpvue-weui","published":1,"updated":"2018-05-30T09:55:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1rt00079xojia7vm4pl","content":"<h1 id=\"mpvue-weui\"><a href=\"#mpvue-weui\" class=\"headerlink\" title=\"mpvue-weui\"></a><a href=\"https://github.com/KuangPF/mpvue-weui\" target=\"_blank\" rel=\"noopener\">mpvue-weui</a></h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上周美团开源了 <a href=\"https://github.com/Meituan-Dianping/mpvue\" target=\"_blank\" rel=\"noopener\">mpvue</a> 框架，他基于<code>Vue.js</code> 的小程序开发框架，从底层支持 <code>Vue.js</code> 语法和构建工具体系。what，小程序可以用<code>vue</code>写了？简直有点不太敢确定，花了<a href=\"http://mpvue.com/mpvue/quickstart/\" target=\"_blank\" rel=\"noopener\">5分钟</a>看了一下简介，没错，真的可以用<code>vue</code>开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。</p>\n<h2 id=\"重写-WeUI\"><a href=\"#重写-WeUI\" class=\"headerlink\" title=\"重写 WeUI\"></a>重写 <code>WeUI</code></h2><p>俗话说，<strong>第一个吃螃蟹的人，总要踩一些坑</strong>（俗话有这么说过？）。<a href=\"https://weui.io/\" target=\"_blank\" rel=\"noopener\">WeUI</a>是微信的官方 UI 库，在小程序中或者移动端使用的非常多，那么就有了一些想法:用 <code>mpvue</code> 重写 <code>WeUI</code>。</p>\n<h2 id=\"mpvue-weui是什么\"><a href=\"#mpvue-weui是什么\" class=\"headerlink\" title=\"mpvue-weui是什么\"></a><code>mpvue-weui</code>是什么</h2><p>也许 <code>mpvue-weui</code> 的内容不像它的名字那么高大上，它不是一个UI库（原谅我霸占了这么好的名字），其实它就是一个 <code>WeUI</code>的 demo 库，就像 <a href=\"https://weui.io/\" target=\"_blank\" rel=\"noopener\">WeUI</a>一样，只不过是基于 <code>mpvue</code> 框架重写了一下。</p>\n<h2 id=\"重写目的\"><a href=\"#重写目的\" class=\"headerlink\" title=\"重写目的\"></a>重写目的</h2><p>其实重写的目的就是看看<code>mpvue</code>好不好用，里面有哪些坑，然后将它写成<a href=\"https://kuangpf.github.io/mpvue-weui/#/\">文档</a>的形式，从而避免基于<code>mpvue</code>框架开发的人再次踩坑。</p>\n<h2 id=\"重写感受\"><a href=\"#重写感受\" class=\"headerlink\" title=\"重写感受\"></a>重写感受</h2><p>当重写完了以后，发现最大的感受就是：</p>\n<ul>\n<li>开发体验很棒，VSCode(IDE 自选)写代码，小程序开发工具开效果；</li>\n<li>对小程序官方组件和 API 支持的非常完美；</li>\n<li>快捷的 webpack 构建机制，开发过程中热更新.</li>\n<li>…</li>\n</ul>\n<p>这次主要是重写 <code>Weui</code>，可能在自定义组件交互方面还没涉及，比如可以使用<code>vuex</code>进行状态管理，或者将来要支持<code>vue-router</code>。总之很好用，为美团点赞。</p>\n<h2 id=\"重写效果\"><a href=\"#重写效果\" class=\"headerlink\" title=\"重写效果\"></a>重写效果</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e73e631622d?w=381&amp;h=670&amp;f=png&amp;s=12631\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e7707ec3aac?w=378&amp;h=670&amp;f=png&amp;s=14440\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e7fae68699b?w=376&amp;h=669&amp;f=png&amp;s=6951\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e81004b17b2?w=377&amp;h=670&amp;f=png&amp;s=8907\" alt=\"\"></p>\n<h2 id=\"踩坑文档\"><a href=\"#踩坑文档\" class=\"headerlink\" title=\"踩坑文档\"></a>踩坑文档</h2><p><a href=\"https://kuangpf.github.io/mpvue-weui/#/\">mpvue-weui 踩坑文档</a></p>\n<p>tip: 文档会随着<code>mpvue</code>新语法或者新特性的更新而继续完善。</p>\n<h2 id=\"相关申明\"><a href=\"#相关申明\" class=\"headerlink\" title=\"相关申明\"></a>相关申明</h2><ol>\n<li>本项目<a href=\"https://github.com/KuangPF/mpvue-weui\" target=\"_blank\" rel=\"noopener\">mpvue-weui</a>主要使用了 <a href=\"https://github.com/Tencent/weui-wxss\" target=\"_blank\" rel=\"noopener\">weui-wxss</a> 中的相关文件，主要目的在于交流学习，如果冒犯了相关的开源协议，实属抱歉。</li>\n<li>这篇文档是自己在重写了 <code>WeUI</code> 以后记录的，如果有说的不对的地方还希望各位大佬指出，一起学习。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mpvue-weui\"><a href=\"#mpvue-weui\" class=\"headerlink\" title=\"mpvue-weui\"></a><a href=\"https://github.com/KuangPF/mpvue-weui\" target=\"_blank\" rel=\"noopener\">mpvue-weui</a></h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上周美团开源了 <a href=\"https://github.com/Meituan-Dianping/mpvue\" target=\"_blank\" rel=\"noopener\">mpvue</a> 框架，他基于<code>Vue.js</code> 的小程序开发框架，从底层支持 <code>Vue.js</code> 语法和构建工具体系。what，小程序可以用<code>vue</code>写了？简直有点不太敢确定，花了<a href=\"http://mpvue.com/mpvue/quickstart/\" target=\"_blank\" rel=\"noopener\">5分钟</a>看了一下简介，没错，真的可以用<code>vue</code>开发小程序。真的是**限制了我的想象力，明白又该学写了，于是就开始准备利用这个框架写一点项目，感受一下他的魅力(其实是踩坑)。</p>\n<h2 id=\"重写-WeUI\"><a href=\"#重写-WeUI\" class=\"headerlink\" title=\"重写 WeUI\"></a>重写 <code>WeUI</code></h2><p>俗话说，<strong>第一个吃螃蟹的人，总要踩一些坑</strong>（俗话有这么说过？）。<a href=\"https://weui.io/\" target=\"_blank\" rel=\"noopener\">WeUI</a>是微信的官方 UI 库，在小程序中或者移动端使用的非常多，那么就有了一些想法:用 <code>mpvue</code> 重写 <code>WeUI</code>。</p>\n<h2 id=\"mpvue-weui是什么\"><a href=\"#mpvue-weui是什么\" class=\"headerlink\" title=\"mpvue-weui是什么\"></a><code>mpvue-weui</code>是什么</h2><p>也许 <code>mpvue-weui</code> 的内容不像它的名字那么高大上，它不是一个UI库（原谅我霸占了这么好的名字），其实它就是一个 <code>WeUI</code>的 demo 库，就像 <a href=\"https://weui.io/\" target=\"_blank\" rel=\"noopener\">WeUI</a>一样，只不过是基于 <code>mpvue</code> 框架重写了一下。</p>\n<h2 id=\"重写目的\"><a href=\"#重写目的\" class=\"headerlink\" title=\"重写目的\"></a>重写目的</h2><p>其实重写的目的就是看看<code>mpvue</code>好不好用，里面有哪些坑，然后将它写成<a href=\"https://kuangpf.github.io/mpvue-weui/#/\">文档</a>的形式，从而避免基于<code>mpvue</code>框架开发的人再次踩坑。</p>\n<h2 id=\"重写感受\"><a href=\"#重写感受\" class=\"headerlink\" title=\"重写感受\"></a>重写感受</h2><p>当重写完了以后，发现最大的感受就是：</p>\n<ul>\n<li>开发体验很棒，VSCode(IDE 自选)写代码，小程序开发工具开效果；</li>\n<li>对小程序官方组件和 API 支持的非常完美；</li>\n<li>快捷的 webpack 构建机制，开发过程中热更新.</li>\n<li>…</li>\n</ul>\n<p>这次主要是重写 <code>Weui</code>，可能在自定义组件交互方面还没涉及，比如可以使用<code>vuex</code>进行状态管理，或者将来要支持<code>vue-router</code>。总之很好用，为美团点赞。</p>\n<h2 id=\"重写效果\"><a href=\"#重写效果\" class=\"headerlink\" title=\"重写效果\"></a>重写效果</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e73e631622d?w=381&amp;h=670&amp;f=png&amp;s=12631\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e7707ec3aac?w=378&amp;h=670&amp;f=png&amp;s=14440\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e7fae68699b?w=376&amp;h=669&amp;f=png&amp;s=6951\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/3/14/16224e81004b17b2?w=377&amp;h=670&amp;f=png&amp;s=8907\" alt=\"\"></p>\n<h2 id=\"踩坑文档\"><a href=\"#踩坑文档\" class=\"headerlink\" title=\"踩坑文档\"></a>踩坑文档</h2><p><a href=\"https://kuangpf.github.io/mpvue-weui/#/\">mpvue-weui 踩坑文档</a></p>\n<p>tip: 文档会随着<code>mpvue</code>新语法或者新特性的更新而继续完善。</p>\n<h2 id=\"相关申明\"><a href=\"#相关申明\" class=\"headerlink\" title=\"相关申明\"></a>相关申明</h2><ol>\n<li>本项目<a href=\"https://github.com/KuangPF/mpvue-weui\" target=\"_blank\" rel=\"noopener\">mpvue-weui</a>主要使用了 <a href=\"https://github.com/Tencent/weui-wxss\" target=\"_blank\" rel=\"noopener\">weui-wxss</a> 中的相关文件，主要目的在于交流学习，如果冒犯了相关的开源协议，实属抱歉。</li>\n<li>这篇文档是自己在重写了 <code>WeUI</code> 以后记录的，如果有说的不对的地方还希望各位大佬指出，一起学习。</li>\n</ol>\n"},{"title":"vue 组件间通信","date":"2018-02-08T02:04:27.000Z","summary":"最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。","_content":"最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。\n### 父组件与子组件\n在vue中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。\n<img src=\"/blog/img/vue-components-bus-01.png\">\n父组件\n``` vue\n<template> \n     <div class=\"components-bus-container\">\n        <children-one :fatherDataOne=\"fatherDataOne\"></children-one>\n     </div> \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            fatherDataOne: '',\n        };\n    },\n}\n</script>\n```\n子组件\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n    },\n    props: ['fatherDataOne']\n}\n</script>\n```\n<p class='tip'>`:fatherDataOne`为数据绑定写法，可以灵活的进行数据设置，如果直接绑定数据，写成`fatherDataOne=\"someData\"`即可</p>\n### 子组件与父组件通信\n对于子组件将数据传给父组件，是通过`$emit`事件来实现的，在图中也可以体现，具体实现如下：\n子组件\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n        <div @click=\"tellParent\">点击传递数据</div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n    },\n    props: ['fatherDataOne']，\n    methods: {\n        tellParent() {\n          this.$emit('listenOne', 'from childrenOne');\n        }\n    }\n}\n</script>\n```\n父组件\n``` vue\n<template> \n     <div class=\"components-bus-container\">\n        <children-one :fatherDataOne=\"fatherDataOne\" @listenOne='getCompomentOne'></children-one>\n     </div> \n</template>\n\n<script>\nexport default {\n  data() {\n      return {\n          fatherDataOne: '',\n      };\n  },\n  methods: {\n    getCompomentOne(param) {\n      console.log(param);\n    }\n  }\n}\n</script>\n```\n在父组件中绑定一个`listenOne`的事件，然后给这个事件添加`getCompomentOne`方法，当子组件children-one通过点击事件`tellParent`触发`listenOne`的时候，父组件里面的`getCompomentOne`方法就会执行，并且数据通过参数的形式传递给父组件，从而实现通信的功能。\n\n### 同级组件间通信\n对于同级间组件进行通信处理的方法是，新建一个Vue实例作为事件总线，具体实现如下：\n1.需要进行通信的同级组件引入`event.js`\n``` javascript\n\timport Vue from 'vue'; \n\tlet bus = new Vue(); \n\texport default bus; \n```\n2.组件`children-one`通过点击事件`sendMsgToTwo`触发`dataFromOne`\nchildren-one\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n        <div @click=\"tellParent\">点击向父组件通信</div>\n        <div @click=\"tellChildTwo\">点击向子组件2通信</div>\n    </div>\n</template>\n\n<script>\nimport bus from 'path/event'\nexport default {\n  data() {\n  },\n  props: ['fatherDataOne']，\n  methods: {\n    tellParent() {\n      this.$emit('listenOne', 'from childrenOne');\n    },\n    tellChildTwo() {\n      bus.$emit('dataFromOne', 'dataFromOne');\n    }\n  }\n}\n</script>\n```\n3.组件`children-two`中监听事件 `dataFromOne`\nchildren-two\n``` vue\n<template>\n    <div class=\"children-two-content\">\n    </div>\n</template>\n\n<script>\nimport bus from 'path/event'\nexport default {\n  data() {\n  },\n  methods: {\n    getMsgFromOne() {\n      bus.$on('dataFromOne', data => {\n        console.log(data);\n      });\n    }\n  },\n  mounted() {\n    this.getMsgFromOne();\n  }\n}\n</script>\n```\n当`children-one`触发`dataFromOne`时，组件`children-two`中的监听事件`dataFromOne`就会被触发，数据通过参数的形式传入，从而实现同级组件间通信。\n\n### 扩展\n##### 1.父组件操作子组件的方法\n利用$refs实现这个功能\n父组件\n``` vue\n<children-one :fatherDataOne=\"fatherDataOne\" @listenOne='getCompomentOne' ref=\"childrenOne\"></children-one>\n```\n那么就可以通过`this.$refs.childrenOne.childenFunction()`来操作子组件中的方法。\n##### 2.父组件将数据传给子组件，出现`undefined`情况\n当父组件传递的数据是异步取值的时候，可能出现首先传过去是空值，然后异步刷新。对于这种情况处理的方法是`v-if`，当父组件拿到数据后，将其设置为true，从而避免undefined的情况。\n \n### 高级用法\n对于一些简单的组件间的通信个人觉得这些方式够用了，如果一个页面涉及到很多的组件，那么也许这种方法不是那么简洁了，这是就需要用到`vue`中很重要的一个插件了`vuex`,以下为官网对`vuex`的介绍：\n[vuex](https://vuex.vuejs.org/)是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 [devtools extension](https://github.com/vuejs/vue-devtools)，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\n如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：\n\n> Flux 架构就像眼镜：您自会知道什么时候需要它。\n\n本文简单介绍了`vue`组件间的通信方式，如有错误，还望指出，大家一起交流学习。\n\n\n\n","source":"_posts/vue-component-communication.md","raw":"---\ntitle: vue 组件间通信\ndate: 2018-02-08 10:04:27\ntags: vue\nsummary: 最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。\n---\n最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。\n### 父组件与子组件\n在vue中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。\n<img src=\"/blog/img/vue-components-bus-01.png\">\n父组件\n``` vue\n<template> \n     <div class=\"components-bus-container\">\n        <children-one :fatherDataOne=\"fatherDataOne\"></children-one>\n     </div> \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            fatherDataOne: '',\n        };\n    },\n}\n</script>\n```\n子组件\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n    },\n    props: ['fatherDataOne']\n}\n</script>\n```\n<p class='tip'>`:fatherDataOne`为数据绑定写法，可以灵活的进行数据设置，如果直接绑定数据，写成`fatherDataOne=\"someData\"`即可</p>\n### 子组件与父组件通信\n对于子组件将数据传给父组件，是通过`$emit`事件来实现的，在图中也可以体现，具体实现如下：\n子组件\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n        <div @click=\"tellParent\">点击传递数据</div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n    },\n    props: ['fatherDataOne']，\n    methods: {\n        tellParent() {\n          this.$emit('listenOne', 'from childrenOne');\n        }\n    }\n}\n</script>\n```\n父组件\n``` vue\n<template> \n     <div class=\"components-bus-container\">\n        <children-one :fatherDataOne=\"fatherDataOne\" @listenOne='getCompomentOne'></children-one>\n     </div> \n</template>\n\n<script>\nexport default {\n  data() {\n      return {\n          fatherDataOne: '',\n      };\n  },\n  methods: {\n    getCompomentOne(param) {\n      console.log(param);\n    }\n  }\n}\n</script>\n```\n在父组件中绑定一个`listenOne`的事件，然后给这个事件添加`getCompomentOne`方法，当子组件children-one通过点击事件`tellParent`触发`listenOne`的时候，父组件里面的`getCompomentOne`方法就会执行，并且数据通过参数的形式传递给父组件，从而实现通信的功能。\n\n### 同级组件间通信\n对于同级间组件进行通信处理的方法是，新建一个Vue实例作为事件总线，具体实现如下：\n1.需要进行通信的同级组件引入`event.js`\n``` javascript\n\timport Vue from 'vue'; \n\tlet bus = new Vue(); \n\texport default bus; \n```\n2.组件`children-one`通过点击事件`sendMsgToTwo`触发`dataFromOne`\nchildren-one\n``` vue\n<template>\n    <div class=\"children-one-content\">\n        <div>{{fatherDataOne}}</div>\n        <div @click=\"tellParent\">点击向父组件通信</div>\n        <div @click=\"tellChildTwo\">点击向子组件2通信</div>\n    </div>\n</template>\n\n<script>\nimport bus from 'path/event'\nexport default {\n  data() {\n  },\n  props: ['fatherDataOne']，\n  methods: {\n    tellParent() {\n      this.$emit('listenOne', 'from childrenOne');\n    },\n    tellChildTwo() {\n      bus.$emit('dataFromOne', 'dataFromOne');\n    }\n  }\n}\n</script>\n```\n3.组件`children-two`中监听事件 `dataFromOne`\nchildren-two\n``` vue\n<template>\n    <div class=\"children-two-content\">\n    </div>\n</template>\n\n<script>\nimport bus from 'path/event'\nexport default {\n  data() {\n  },\n  methods: {\n    getMsgFromOne() {\n      bus.$on('dataFromOne', data => {\n        console.log(data);\n      });\n    }\n  },\n  mounted() {\n    this.getMsgFromOne();\n  }\n}\n</script>\n```\n当`children-one`触发`dataFromOne`时，组件`children-two`中的监听事件`dataFromOne`就会被触发，数据通过参数的形式传入，从而实现同级组件间通信。\n\n### 扩展\n##### 1.父组件操作子组件的方法\n利用$refs实现这个功能\n父组件\n``` vue\n<children-one :fatherDataOne=\"fatherDataOne\" @listenOne='getCompomentOne' ref=\"childrenOne\"></children-one>\n```\n那么就可以通过`this.$refs.childrenOne.childenFunction()`来操作子组件中的方法。\n##### 2.父组件将数据传给子组件，出现`undefined`情况\n当父组件传递的数据是异步取值的时候，可能出现首先传过去是空值，然后异步刷新。对于这种情况处理的方法是`v-if`，当父组件拿到数据后，将其设置为true，从而避免undefined的情况。\n \n### 高级用法\n对于一些简单的组件间的通信个人觉得这些方式够用了，如果一个页面涉及到很多的组件，那么也许这种方法不是那么简洁了，这是就需要用到`vue`中很重要的一个插件了`vuex`,以下为官网对`vuex`的介绍：\n[vuex](https://vuex.vuejs.org/)是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 [devtools extension](https://github.com/vuejs/vue-devtools)，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\n如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：\n\n> Flux 架构就像眼镜：您自会知道什么时候需要它。\n\n本文简单介绍了`vue`组件间的通信方式，如有错误，还望指出，大家一起交流学习。\n\n\n\n","slug":"vue-component-communication","published":1,"updated":"2018-05-30T09:55:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1ru00089xoj5idkk92w","content":"<p>最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。</p>\n<h3 id=\"父组件与子组件\"><a href=\"#父组件与子组件\" class=\"headerlink\" title=\"父组件与子组件\"></a>父组件与子组件</h3><p>在vue中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。<br><img src=\"/blog/img/vue-components-bus-01.png\"><br>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">     &lt;div class=&quot;components-bus-container&quot;&gt;</span><br><span class=\"line\">        &lt;children-one :fatherDataOne=&quot;fatherDataOne&quot;&gt;&lt;/children-one&gt;</span><br><span class=\"line\">     &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            fatherDataOne: &apos;&apos;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>子组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: [&apos;fatherDataOne&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"tip\"><code>:fatherDataOne</code>为数据绑定写法，可以灵活的进行数据设置，如果直接绑定数据，写成<code>fatherDataOne=&quot;someData&quot;</code>即可</p><p></p>\n<h3 id=\"子组件与父组件通信\"><a href=\"#子组件与父组件通信\" class=\"headerlink\" title=\"子组件与父组件通信\"></a>子组件与父组件通信</h3><p>对于子组件将数据传给父组件，是通过<code>$emit</code>事件来实现的，在图中也可以体现，具体实现如下：<br>子组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellParent&quot;&gt;点击传递数据&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: [&apos;fatherDataOne&apos;]，</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        tellParent() &#123;</span><br><span class=\"line\">          this.$emit(&apos;listenOne&apos;, &apos;from childrenOne&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">     &lt;div class=&quot;components-bus-container&quot;&gt;</span><br><span class=\"line\">        &lt;children-one :fatherDataOne=&quot;fatherDataOne&quot; @listenOne=&apos;getCompomentOne&apos;&gt;&lt;/children-one&gt;</span><br><span class=\"line\">     &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">          fatherDataOne: &apos;&apos;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCompomentOne(param) &#123;</span><br><span class=\"line\">      console.log(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在父组件中绑定一个<code>listenOne</code>的事件，然后给这个事件添加<code>getCompomentOne</code>方法，当子组件children-one通过点击事件<code>tellParent</code>触发<code>listenOne</code>的时候，父组件里面的<code>getCompomentOne</code>方法就会执行，并且数据通过参数的形式传递给父组件，从而实现通信的功能。</p>\n<h3 id=\"同级组件间通信\"><a href=\"#同级组件间通信\" class=\"headerlink\" title=\"同级组件间通信\"></a>同级组件间通信</h3><p>对于同级间组件进行通信处理的方法是，新建一个Vue实例作为事件总线，具体实现如下：<br>1.需要进行通信的同级组件引入<code>event.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> bus = <span class=\"keyword\">new</span> Vue(); </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> bus;</span><br></pre></td></tr></table></figure></p>\n<p>2.组件<code>children-one</code>通过点击事件<code>sendMsgToTwo</code>触发<code>dataFromOne</code><br>children-one<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellParent&quot;&gt;点击向父组件通信&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellChildTwo&quot;&gt;点击向子组件2通信&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import bus from &apos;path/event&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: [&apos;fatherDataOne&apos;]，</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    tellParent() &#123;</span><br><span class=\"line\">      this.$emit(&apos;listenOne&apos;, &apos;from childrenOne&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tellChildTwo() &#123;</span><br><span class=\"line\">      bus.$emit(&apos;dataFromOne&apos;, &apos;dataFromOne&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.组件<code>children-two</code>中监听事件 <code>dataFromOne</code><br>children-two<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-two-content&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import bus from &apos;path/event&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getMsgFromOne() &#123;</span><br><span class=\"line\">      bus.$on(&apos;dataFromOne&apos;, data =&gt; &#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.getMsgFromOne();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当<code>children-one</code>触发<code>dataFromOne</code>时，组件<code>children-two</code>中的监听事件<code>dataFromOne</code>就会被触发，数据通过参数的形式传入，从而实现同级组件间通信。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h5 id=\"1-父组件操作子组件的方法\"><a href=\"#1-父组件操作子组件的方法\" class=\"headerlink\" title=\"1.父组件操作子组件的方法\"></a>1.父组件操作子组件的方法</h5><p>利用$refs实现这个功能<br>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;children-one :fatherDataOne=&quot;fatherDataOne&quot; @listenOne=&apos;getCompomentOne&apos; ref=&quot;childrenOne&quot;&gt;&lt;/children-one&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么就可以通过<code>this.$refs.childrenOne.childenFunction()</code>来操作子组件中的方法。</p>\n<h5 id=\"2-父组件将数据传给子组件，出现undefined情况\"><a href=\"#2-父组件将数据传给子组件，出现undefined情况\" class=\"headerlink\" title=\"2.父组件将数据传给子组件，出现undefined情况\"></a>2.父组件将数据传给子组件，出现<code>undefined</code>情况</h5><p>当父组件传递的数据是异步取值的时候，可能出现首先传过去是空值，然后异步刷新。对于这种情况处理的方法是<code>v-if</code>，当父组件拿到数据后，将其设置为true，从而避免undefined的情况。</p>\n<h3 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h3><p>对于一些简单的组件间的通信个人觉得这些方式够用了，如果一个页面涉及到很多的组件，那么也许这种方法不是那么简洁了，这是就需要用到<code>vue</code>中很重要的一个插件了<code>vuex</code>,以下为官网对<code>vuex</code>的介绍：<br><a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vuex</a>是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。<br>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</p>\n<blockquote>\n<p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p>\n</blockquote>\n<p>本文简单介绍了<code>vue</code>组件间的通信方式，如有错误，还望指出，大家一起交流学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在学习vue方面的的知识，毫无疑问，对于vue来说，组件化是其一个很大的特点，一方面可以提高代码的可读性，另一方面可以少写很多的代码，利于代码的维护。对于组件之间数据通信是一个必须要掌握的知识点，通信之间的方式一共可以分为三种，父组件与子组件，子组件与父组件，同级组件间通信。</p>\n<h3 id=\"父组件与子组件\"><a href=\"#父组件与子组件\" class=\"headerlink\" title=\"父组件与子组件\"></a>父组件与子组件</h3><p>在vue中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。<br><img src=\"/blog/img/vue-components-bus-01.png\"><br>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">     &lt;div class=&quot;components-bus-container&quot;&gt;</span><br><span class=\"line\">        &lt;children-one :fatherDataOne=&quot;fatherDataOne&quot;&gt;&lt;/children-one&gt;</span><br><span class=\"line\">     &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            fatherDataOne: &apos;&apos;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>子组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: [&apos;fatherDataOne&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"tip\"><code>:fatherDataOne</code>为数据绑定写法，可以灵活的进行数据设置，如果直接绑定数据，写成<code>fatherDataOne=&quot;someData&quot;</code>即可</p><p></p>\n<h3 id=\"子组件与父组件通信\"><a href=\"#子组件与父组件通信\" class=\"headerlink\" title=\"子组件与父组件通信\"></a>子组件与父组件通信</h3><p>对于子组件将数据传给父组件，是通过<code>$emit</code>事件来实现的，在图中也可以体现，具体实现如下：<br>子组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellParent&quot;&gt;点击传递数据&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props: [&apos;fatherDataOne&apos;]，</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        tellParent() &#123;</span><br><span class=\"line\">          this.$emit(&apos;listenOne&apos;, &apos;from childrenOne&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">     &lt;div class=&quot;components-bus-container&quot;&gt;</span><br><span class=\"line\">        &lt;children-one :fatherDataOne=&quot;fatherDataOne&quot; @listenOne=&apos;getCompomentOne&apos;&gt;&lt;/children-one&gt;</span><br><span class=\"line\">     &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">          fatherDataOne: &apos;&apos;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCompomentOne(param) &#123;</span><br><span class=\"line\">      console.log(param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在父组件中绑定一个<code>listenOne</code>的事件，然后给这个事件添加<code>getCompomentOne</code>方法，当子组件children-one通过点击事件<code>tellParent</code>触发<code>listenOne</code>的时候，父组件里面的<code>getCompomentOne</code>方法就会执行，并且数据通过参数的形式传递给父组件，从而实现通信的功能。</p>\n<h3 id=\"同级组件间通信\"><a href=\"#同级组件间通信\" class=\"headerlink\" title=\"同级组件间通信\"></a>同级组件间通信</h3><p>对于同级间组件进行通信处理的方法是，新建一个Vue实例作为事件总线，具体实现如下：<br>1.需要进行通信的同级组件引入<code>event.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> bus = <span class=\"keyword\">new</span> Vue(); </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> bus;</span><br></pre></td></tr></table></figure></p>\n<p>2.组件<code>children-one</code>通过点击事件<code>sendMsgToTwo</code>触发<code>dataFromOne</code><br>children-one<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-one-content&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;fatherDataOne&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellParent&quot;&gt;点击向父组件通信&lt;/div&gt;</span><br><span class=\"line\">        &lt;div @click=&quot;tellChildTwo&quot;&gt;点击向子组件2通信&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import bus from &apos;path/event&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: [&apos;fatherDataOne&apos;]，</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    tellParent() &#123;</span><br><span class=\"line\">      this.$emit(&apos;listenOne&apos;, &apos;from childrenOne&apos;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tellChildTwo() &#123;</span><br><span class=\"line\">      bus.$emit(&apos;dataFromOne&apos;, &apos;dataFromOne&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.组件<code>children-two</code>中监听事件 <code>dataFromOne</code><br>children-two<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;children-two-content&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import bus from &apos;path/event&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getMsgFromOne() &#123;</span><br><span class=\"line\">      bus.$on(&apos;dataFromOne&apos;, data =&gt; &#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.getMsgFromOne();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当<code>children-one</code>触发<code>dataFromOne</code>时，组件<code>children-two</code>中的监听事件<code>dataFromOne</code>就会被触发，数据通过参数的形式传入，从而实现同级组件间通信。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h5 id=\"1-父组件操作子组件的方法\"><a href=\"#1-父组件操作子组件的方法\" class=\"headerlink\" title=\"1.父组件操作子组件的方法\"></a>1.父组件操作子组件的方法</h5><p>利用$refs实现这个功能<br>父组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;children-one :fatherDataOne=&quot;fatherDataOne&quot; @listenOne=&apos;getCompomentOne&apos; ref=&quot;childrenOne&quot;&gt;&lt;/children-one&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么就可以通过<code>this.$refs.childrenOne.childenFunction()</code>来操作子组件中的方法。</p>\n<h5 id=\"2-父组件将数据传给子组件，出现undefined情况\"><a href=\"#2-父组件将数据传给子组件，出现undefined情况\" class=\"headerlink\" title=\"2.父组件将数据传给子组件，出现undefined情况\"></a>2.父组件将数据传给子组件，出现<code>undefined</code>情况</h5><p>当父组件传递的数据是异步取值的时候，可能出现首先传过去是空值，然后异步刷新。对于这种情况处理的方法是<code>v-if</code>，当父组件拿到数据后，将其设置为true，从而避免undefined的情况。</p>\n<h3 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h3><p>对于一些简单的组件间的通信个人觉得这些方式够用了，如果一个页面涉及到很多的组件，那么也许这种方法不是那么简洁了，这是就需要用到<code>vue</code>中很重要的一个插件了<code>vuex</code>,以下为官网对<code>vuex</code>的介绍：<br><a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vuex</a>是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">devtools extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。<br>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</p>\n<blockquote>\n<p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p>\n</blockquote>\n<p>本文简单介绍了<code>vue</code>组件间的通信方式，如有错误，还望指出，大家一起交流学习。</p>\n"},{"title":"vue-router 的一些记录","date":"2018-02-24T09:38:06.000Z","summary":"一直对 vue-router 有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。","_content":"一直对**vue-router**有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。\n### vue-router 传参\n在使用 vue-router 进行页面跳转的时候，有以下两种方式可以实现：\n* `<router-link>Home</router-link>`---声明式\n\n``` html\n<!-- 字符串 -->\n<router-link to=\"home\">Home</router-link>\n<!-- 渲染结果 -->\n<a href=\"home\">Home</a>\n\n<!-- 使用 v-bind 的 JS 表达式 -->\n<router-link v-bind:to=\"'home'\">Home</router-link>\n\n<!-- 不写 v-bind 也可以，就像绑定别的属性一样 -->\n<router-link :to=\"'home'\">Home</router-link>\n\n<!-- 同上 -->\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n\n<!-- 命名的路由 -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n\n<!-- 带查询参数，下面的结果为 /register?plan=private -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">Register</router-link>\n```\n* `router.push(...)`---编程式\n\n该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：\n\n``` javascript\n// 字符串\nrouter.push('home')\n\n// 对象\nrouter.push({ path: 'home' })\n\n// 命名的路由\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n<p class=\"tip\">注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p>\n\n``` javascript\nconst userId = 123\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// 这里的 params 不生效\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n```\n\n这两种方式传递参数的方式其实是一样的，从写法也可以大致看出，下面就对参数的传递方式进行介绍\n首先创建一个Router实例\n``` javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n#### 1.使用params方式\n``` javascript\nrouter.push({ name: 'user', params: { userId: 123 }}) // -> /user\n```\n获取参数:\n``` javascript\nrouter.params.userId  //123\n```\n<p class=\"tip\">这种方式看上去不错，对于传递的参数没有在浏览器的地址栏显示，而是隐藏了。但是当我们再次刷新的时候,`router.params.userId`就变成了`undefined`，对于这个解决方法如下:</p>\n修改Router实例，在路由路径上增加该参数\n``` javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n此时，浏览器的地址栏就会变成:/user/123,然后不管怎么刷新也会取到参数。其实使用`query`方式传递参数也可以避免这个问题。\n\n#### 2.使用query方式\n\n``` javascript\nrouter.push({ path: '/user', query: { userId: 123 }}) // ->/user?userId=123\n```\n获取参数:\n``` javascript\nrouter.query.userId  //123\n```","source":"_posts/vue-router.md","raw":"---\ntitle: vue-router 的一些记录\ndate: 2018-02-24 17:38:06\ntags: [vue]\nsummary: 一直对 vue-router 有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。\n---\n一直对**vue-router**有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。\n### vue-router 传参\n在使用 vue-router 进行页面跳转的时候，有以下两种方式可以实现：\n* `<router-link>Home</router-link>`---声明式\n\n``` html\n<!-- 字符串 -->\n<router-link to=\"home\">Home</router-link>\n<!-- 渲染结果 -->\n<a href=\"home\">Home</a>\n\n<!-- 使用 v-bind 的 JS 表达式 -->\n<router-link v-bind:to=\"'home'\">Home</router-link>\n\n<!-- 不写 v-bind 也可以，就像绑定别的属性一样 -->\n<router-link :to=\"'home'\">Home</router-link>\n\n<!-- 同上 -->\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n\n<!-- 命名的路由 -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n\n<!-- 带查询参数，下面的结果为 /register?plan=private -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">Register</router-link>\n```\n* `router.push(...)`---编程式\n\n该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：\n\n``` javascript\n// 字符串\nrouter.push('home')\n\n// 对象\nrouter.push({ path: 'home' })\n\n// 命名的路由\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n<p class=\"tip\">注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p>\n\n``` javascript\nconst userId = 123\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// 这里的 params 不生效\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n```\n\n这两种方式传递参数的方式其实是一样的，从写法也可以大致看出，下面就对参数的传递方式进行介绍\n首先创建一个Router实例\n``` javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n#### 1.使用params方式\n``` javascript\nrouter.push({ name: 'user', params: { userId: 123 }}) // -> /user\n```\n获取参数:\n``` javascript\nrouter.params.userId  //123\n```\n<p class=\"tip\">这种方式看上去不错，对于传递的参数没有在浏览器的地址栏显示，而是隐藏了。但是当我们再次刷新的时候,`router.params.userId`就变成了`undefined`，对于这个解决方法如下:</p>\n修改Router实例，在路由路径上增加该参数\n``` javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n此时，浏览器的地址栏就会变成:/user/123,然后不管怎么刷新也会取到参数。其实使用`query`方式传递参数也可以避免这个问题。\n\n#### 2.使用query方式\n\n``` javascript\nrouter.push({ path: '/user', query: { userId: 123 }}) // ->/user?userId=123\n```\n获取参数:\n``` javascript\nrouter.query.userId  //123\n```","slug":"vue-router","published":1,"updated":"2018-05-30T09:55:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhsxt1rw000a9xoj4a7x7z70","content":"<p>一直对<strong>vue-router</strong>有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。</p>\n<h3 id=\"vue-router-传参\"><a href=\"#vue-router-传参\" class=\"headerlink\" title=\"vue-router 传参\"></a>vue-router 传参</h3><p>在使用 vue-router 进行页面跳转的时候，有以下两种方式可以实现：</p>\n<ul>\n<li><code>&lt;router-link&gt;Home&lt;/router-link&gt;</code>—声明式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-bind:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'home' &#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 命名的路由 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;\"</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>router.push(...)</code>—编程式</li>\n</ul>\n<p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">router.push(<span class=\"string\">'home'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'home'</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名的路由</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带查询参数，变成 /register?plan=private</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'register'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">plan</span>: <span class=\"string\">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> userId = <span class=\"number\">123</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; userId &#125;&#125;) <span class=\"comment\">// -&gt; /user/123</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">`/user/<span class=\"subst\">$&#123;userId&#125;</span>`</span> &#125;) <span class=\"comment\">// -&gt; /user/123</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 params 不生效</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'/user'</span>, <span class=\"attr\">params</span>: &#123; userId &#125;&#125;) <span class=\"comment\">// -&gt; /user</span></span><br></pre></td></tr></table></figure>\n<p>这两种方式传递参数的方式其实是一样的，从写法也可以大致看出，下面就对参数的传递方式进行介绍<br>首先创建一个Router实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">      component: User</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-使用params方式\"><a href=\"#1-使用params方式\" class=\"headerlink\" title=\"1.使用params方式\"></a>1.使用params方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;) <span class=\"comment\">// -&gt; /user</span></span><br></pre></td></tr></table></figure>\n<p>获取参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.params.userId  <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"tip\">这种方式看上去不错，对于传递的参数没有在浏览器的地址栏显示，而是隐藏了。但是当我们再次刷新的时候,<code>router.params.userId</code>就变成了<code>undefined</code>，对于这个解决方法如下:</p><br>修改Router实例，在路由路径上增加该参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/user/:userId'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">      component: User</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p></p>\n<p>此时，浏览器的地址栏就会变成:/user/123,然后不管怎么刷新也会取到参数。其实使用<code>query</code>方式传递参数也可以避免这个问题。</p>\n<h4 id=\"2-使用query方式\"><a href=\"#2-使用query方式\" class=\"headerlink\" title=\"2.使用query方式\"></a>2.使用query方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'/user'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;) <span class=\"comment\">// -&gt;/user?userId=123</span></span><br></pre></td></tr></table></figure>\n<p>获取参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.query.userId  <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直对<strong>vue-router</strong>有点敬畏之心，因为总感觉对他的理解模模糊糊的，今天看了一下官网文档，有了一点点的理解，时来兴起，就有了这篇文章。</p>\n<h3 id=\"vue-router-传参\"><a href=\"#vue-router-传参\" class=\"headerlink\" title=\"vue-router 传参\"></a>vue-router 传参</h3><p>在使用 vue-router 进行页面跳转的时候，有以下两种方式可以实现：</p>\n<ul>\n<li><code>&lt;router-link&gt;Home&lt;/router-link&gt;</code>—声明式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 渲染结果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-bind:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'home' &#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 命名的路由 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;\"</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>router.push(...)</code>—编程式</li>\n</ul>\n<p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">router.push(<span class=\"string\">'home'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'home'</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名的路由</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带查询参数，变成 /register?plan=private</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'register'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">plan</span>: <span class=\"string\">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> userId = <span class=\"number\">123</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; userId &#125;&#125;) <span class=\"comment\">// -&gt; /user/123</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">`/user/<span class=\"subst\">$&#123;userId&#125;</span>`</span> &#125;) <span class=\"comment\">// -&gt; /user/123</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 params 不生效</span></span><br><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'/user'</span>, <span class=\"attr\">params</span>: &#123; userId &#125;&#125;) <span class=\"comment\">// -&gt; /user</span></span><br></pre></td></tr></table></figure>\n<p>这两种方式传递参数的方式其实是一样的，从写法也可以大致看出，下面就对参数的传递方式进行介绍<br>首先创建一个Router实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">      component: User</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-使用params方式\"><a href=\"#1-使用params方式\" class=\"headerlink\" title=\"1.使用params方式\"></a>1.使用params方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>, <span class=\"attr\">params</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;) <span class=\"comment\">// -&gt; /user</span></span><br></pre></td></tr></table></figure>\n<p>获取参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.params.userId  <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"tip\">这种方式看上去不错，对于传递的参数没有在浏览器的地址栏显示，而是隐藏了。但是当我们再次刷新的时候,<code>router.params.userId</code>就变成了<code>undefined</code>，对于这个解决方法如下:</p><br>修改Router实例，在路由路径上增加该参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/user/:userId'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">      component: User</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p></p>\n<p>此时，浏览器的地址栏就会变成:/user/123,然后不管怎么刷新也会取到参数。其实使用<code>query</code>方式传递参数也可以避免这个问题。</p>\n<h4 id=\"2-使用query方式\"><a href=\"#2-使用query方式\" class=\"headerlink\" title=\"2.使用query方式\"></a>2.使用query方式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.push(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'/user'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;&#125;) <span class=\"comment\">// -&gt;/user?userId=123</span></span><br></pre></td></tr></table></figure>\n<p>获取参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.query.userId  <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhsxt1rj00009xoj1ftqun15","tag_id":"cjhsxt1rq00049xoj33su7n19","_id":"cjhsxt1ry000c9xoj6t5m7bzf"},{"post_id":"cjhsxt1rj00009xoj1ftqun15","tag_id":"cjhsxt1rv00099xoj3eah8oi5","_id":"cjhsxt1ry000d9xoj6culcfli"},{"post_id":"cjhsxt1rn00029xoj76feluws","tag_id":"cjhsxt1rx000b9xoj9hbniyjj","_id":"cjhsxt1s0000f9xoj6rh7kedd"},{"post_id":"cjhsxt1rs00059xoj17yuopum","tag_id":"cjhsxt1rx000b9xoj9hbniyjj","_id":"cjhsxt1s1000h9xojmenxznie"},{"post_id":"cjhsxt1rt00079xojia7vm4pl","tag_id":"cjhsxt1s0000g9xoj9uakusj5","_id":"cjhsxt1s5000l9xojc27tbaro"},{"post_id":"cjhsxt1rt00079xojia7vm4pl","tag_id":"cjhsxt1s2000i9xoju5vf5mc0","_id":"cjhsxt1s5000m9xojshfcwgzg"},{"post_id":"cjhsxt1rt00079xojia7vm4pl","tag_id":"cjhsxt1s2000j9xoj49hhbcgh","_id":"cjhsxt1s6000o9xoji1n8owen"},{"post_id":"cjhsxt1ru00089xoj5idkk92w","tag_id":"cjhsxt1s2000i9xoju5vf5mc0","_id":"cjhsxt1s6000p9xojnwh88if4"},{"post_id":"cjhsxt1rw000a9xoj4a7x7z70","tag_id":"cjhsxt1s2000i9xoju5vf5mc0","_id":"cjhsxt1s6000q9xojrxgf5wgk"}],"Tag":[{"name":"CSS","_id":"cjhsxt1rq00049xoj33su7n19"},{"name":"面试","_id":"cjhsxt1rv00099xoj3eah8oi5"},{"name":"javascript","_id":"cjhsxt1rx000b9xoj9hbniyjj"},{"name":"mpvue","_id":"cjhsxt1s0000g9xoj9uakusj5"},{"name":"vue","_id":"cjhsxt1s2000i9xoju5vf5mc0"},{"name":"小程序","_id":"cjhsxt1s2000j9xoj49hhbcgh"}]}}